---
import Page from '@/layouts/Page.astro';
import { getAllAdminUsers, createAdminUser } from '@lib/admin-user';
import { PageHeader, PageTitle } from '@/components/text';
import AdminUsersTableAstro from '@/components/admin-users/AdminUsersTable.astro';
import AddAdminUserForm from '@/components/admin-users/AddAdminUserForm.astro';
import { getUserByLogin } from '@lil-indigestion-cards/core/lib/twitch';
import { Action } from '@/lib/action';
import { createAlerts } from '@/lib/alert';
import { setAdminEnvSession } from '@lil-indigestion-cards/core/lib/session';

const { output } = await Action(
	Astro,
	{
		method: 'POST',
		authorizationType: 'user',
		schema: {
			username: 'string',
		},
	},
	async ({ username }) => {
		const user = await getUserByLogin(username);
		if (!user)
			return {
				error: `User ${username} is not a valid Twitch user.`,
			};

		setAdminEnvSession(
			Astro.locals.session?.properties.username || 'admin',
			Astro.locals.session?.properties.userId || 'admin'
		);

		const result = await createAdminUser({
			userId: user.id,
			username: user.display_name,
		});

		if (!result.success) {
			return {
				error: result.error,
			};
		}

		return;
	}
);

console.log(output);
const alerts = output?.error
	? createAlerts({
			type: 'error',
			message: output.error,
	  })
	: undefined;

const currentUser = Astro.locals.session?.properties?.userId;
const users = (await getAllAdminUsers()).sort((a, b) => {
	if (a.userId === currentUser) {
		return -1;
	}
	if (b.userId === currentUser) {
		return 1;
	}
	return 0;
});
---

<Page title="Admin Users" {alerts}>
	<PageHeader>
		<PageTitle>Add Admin</PageTitle>
	</PageHeader>
	<div class="mx-auto max-w-2xl">
		<AddAdminUserForm />
		<AdminUsersTableAstro admins={users} currentUser={currentUser ?? ''} />
	</div>
</Page>
