---
import Base, { type BaseProps } from './Base.astro';
import Breadcrumbs, { type Path } from '@/components/Breadcrumbs.astro';
import AdminOnly from '@/components/AdminOnly.astro';
import AdminPanel from '@/components/AdminPanel.astro';
import Header from '@/components/Header.astro';
import Footer from '@/components/footer/Footer.astro';
import AlertBox from '@/components/AlertBox';
import { getSiteConfig } from '@lil-indigestion-cards/core/lib/site-config';
import { Api } from 'sst/node/api';

export interface Props extends BaseProps {
	class?: string;
	breadcrumbs?: Path[];
	wide?: boolean;
	'no-header'?: boolean;
	'hide-breadcrumbs'?: boolean;
}

const isAdmin = Astro.locals.session?.type === 'admin';
const alerts = isAdmin ? (await getSiteConfig())?.messages ?? [] : [];

{
	const alert = Astro.url.searchParams.get('alert');
	const alertType =
		Astro.url.searchParams.get('alertType') ||
		Astro.url.searchParams.get('alerttype') ||
		Astro.url.searchParams.get('type');
	if (alert) alerts.push({ type: alertType === 'error' ? 'error' : 'success', message: alert });
}

let {
	class: className,
	breadcrumbs,
	wide = false,
	'hide-breadcrumbs': hideBreadcrumbs,
	'no-header': noHeader = false,
	...baseProps
} = Astro.props;
---

<Base {...baseProps}>
	<div
		class="grid h-[100svh] grid-cols-1 overflow-hidden md:grid-cols-[max-content_1fr]"
		id="page-layout-wrapper"
		data-api-url={Api.AdminApi.url}>
		<AdminOnly>
			<AdminPanel />
		</AdminOnly>
		<div
			class="relative flex flex-col overflow-y-scroll md:col-start-2 bg-gray-50 dark:bg-gray-950"
			id="page-scroll-wrapper">
			{noHeader ? null : <Header />}
			<AlertBox client:load {alerts} />
			{
				hideBreadcrumbs ? null : (
					<div class="max-w-main mx-auto w-full">
						<Breadcrumbs path={breadcrumbs ?? []} />
					</div>
				)
			}
			<main
				transition:name={wide ? undefined : 'main'}
				class:list={{ 'max-w-main': !wide, [className ?? '']: true, 'p-3': !noHeader }}
				class="z-0 col-start-2 mx-auto mb-8 w-full flex-1">
				<slot />
			</main>
			<Footer />
		</div>
	</div>
	<script>
		// check search params for auth_token
		const params = new URLSearchParams(window.location.search);
		const auth_token = params.get('auth_token');
		if (auth_token) {
			// set auth_token in local storage
			localStorage.setItem('auth_token', auth_token);
			// remove auth_token from url
			params.delete('auth_token');
			window.history.replaceState({}, '', `${window.location.pathname}?${params.toString()}`);
		}

		const pageLayoutWrapper = document.getElementById('page-layout-wrapper')!;
		const apiURL = pageLayoutWrapper.dataset.apiUrl!;
		localStorage.setItem('api_url', apiURL);
	</script>
</Base>

<style>
	@media (max-width: 768px) {
		.toggle-btn {
			display: block;
			transform: translateX(calc(var(--isClosed) * 100%));
		}
	}
</style>
