---
import Base, { type BaseProps } from './Base.astro';
import Hamburger from '@/components/Hamburger.astro';
import Breadcrumbs, { type Path } from '@/components/Breadcrumbs.astro';
import UserSearch from '@/components/UserSearch.astro';
import AdminOnly from '@/components/AdminOnly.astro';
import AdminPanel from '@/components/AdminPanel.astro';

Astro.cookies.set('lilind_code', 'pants', {
	path: '/',
	httpOnly: true,
	maxAge: 60 * 60 * 24 * 30,
	sameSite: 'lax',
});

export interface Props extends BaseProps {
	class?: string;
	breadcrumbs?: Path[];
}

const { class: className, breadcrumbs, ...baseProps } = Astro.props;

const alert = Astro.url.searchParams.get('alert') || Astro.request.headers.get('MY-ALERT');
const alertType =
	Astro.url.searchParams.get('alertType') ??
	Astro.url.searchParams.get('type') ??
	Astro.request.headers.get('MY-ALERT-TYPE') ??
	'error';
---

<Base {...baseProps}>
	<div class="page-layout grid h-[100svh] overflow-hidden" hx-swap="morphdom transition:true">
		<AdminOnly>
			<AdminPanel />
		</AdminOnly>
		<div class="md:col-start-2 overflow-y-scroll relative" id="page-scroll-wrapper">
			<header
				class="text-white text-shadow flex sticky top-0 z-10 h-14 items-center px-4 py-4 md:py-8 gap-4"
				hx-disable>
				<AdminOnly>
					<div
						data-for-admin-panel
						class="toggle-btn flex-1 text-lg brand-shadow px-2 py-2 z-100">
						<Hamburger />
					</div>
				</AdminOnly>
				<a
					href="/"
					title="Home"
					class="flex-col font-display text-white text-shadow hidden md:flex flex-1">
					<span class="italic text-2xl mt-1">indigestion</span>
					<span class="text-lg -mt-2">cards</span>
				</a>
				<UserSearch />
			</header>
			<div id="alert-wrapper" class="sticky top-0">
				{
					alert ? (
						<p class="alert-text-box" data-type={alertType}>
							{alert}
						</p>
					) : null
				}
			</div>
			<div class="flex-1">
				<Breadcrumbs path={breadcrumbs ?? []} />
			</div>
			<main
				class={(className ?? '') +
					' p-4 md:p-6 lg:p-8 xl:p-10 col-start-2 max-w-6xl slide-it'}>
				<slot />
			</main>
		</div>
	</div>
</Base>

<style>
	.page-layout {
		grid-template-columns: max-content 1fr;
	}

	header {
		background-color: var(--dark-main);
		background-image: linear-gradient(35deg, var(--dark-secondary) 0%, var(--dark-main) 100%);
	}

	.toggle-btn {
		display: none;
		--color: white;
		--open-color: white;
		--spacing: 0.34em;
		--thickness: 0.16em;
		--size: 1rem;
		--width: 1.3em;
		--text-value: calc(255 - 255 * var(--isClosed));
		padding-left: 1rem;
		color: rgb(var(--text-value), var(--text-value), var(--text-value));
		z-index: 1;
		background: transparent;
		font-weight: 900;
		transition: transform 0.3s ease-in-out, color 0.3s ease-in-out;
		align-self: center;
	}

	main {
		z-index: 0;
	}

	@media (max-width: 768px) {
		.page-layout {
			grid-template-columns: 1fr;
		}

		.toggle-btn {
			display: block;
			transform: translateX(calc(var(--isClosed) * 100%));
		}
	}
</style>

<script>
	window.onload = () => {
		// remove alert and alertType from url search params
		const url = new URL(window.location.href);
		url.searchParams.delete('alert');
		url.searchParams.delete('alertType');
		window.history.replaceState({}, '', url);
	};

	const alertWrapper = document.getElementById('alert-wrapper') as HTMLDivElement;
	document.body.addEventListener('clearAlert', () => {
		alertWrapper.replaceChildren();
	});

	document.body.addEventListener('displayAlert', (e) => {
		// @ts-expect-error - this does exist
		const text = e.detail.message;
		// @ts-expect-error - this one too
		const type = e.detail.type ?? 'error';

		const alert = document.createElement('p');
		alert.classList.add('alert-text-box');
		alert.dataset.type = type;
		alert.textContent = text;
		const closeBtn = document.createElement('button');
		closeBtn.textContent = 'x';
		closeBtn.addEventListener('click', () => {
			alertWrapper.replaceChildren();
		});
		alert.appendChild(closeBtn);
		alertWrapper.replaceChildren(alert);

		// scroll to top
		document.getElementById('page-scroll-wrapper')?.scrollTo(0, 0);
	});
</script>
