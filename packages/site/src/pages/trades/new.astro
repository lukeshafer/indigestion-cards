---
// UI
import { PageHeader, PageTitle } from '@site/components/text';
import { routeNames, routes } from '@site/constants';
import Page, { type Props as PageProps } from '@site/layouts/Page.astro';
import NewTrade from '@site/components/trades/NewTrade';
import { getUser, getUserAndOpenedCardInstances } from '@core/lib/user';
import type { CardInstance } from '@core/types';
import { getRarityRanking, } from '@core/lib/site-config';

const { userId } = Astro.locals.user?.properties || {};

if (!userId) {
	return Astro.redirect('/?alert=You must be logged in to view this page.&type=error');
}

const { username } = (await getUser(userId)) || {};

if (!username) {
	return Astro.redirect('/?alert=You must be logged in to view this page.&type=error');
}

const alerts: PageProps['alerts'] = [];

const searchParams = Astro.url.searchParams;
const offeredCardIds = searchParams.getAll('offeredCards');
const requestedCardIds = searchParams.getAll('requestedCards');
let initialReceiverUsername = searchParams.get('receiverUsername') ?? undefined;

const rarityRanking = getRarityRanking(Astro.locals.siteConfig);

const { CardInstances: cardInstances = [] } = (await getUserAndOpenedCardInstances({ username })) ?? {};
const { CardInstances: initialReceiverCards = [], Users: initialReceiverUser = [] } =
	initialReceiverUsername
		? (await getUserAndOpenedCardInstances({ username: initialReceiverUsername })) ?? {}
		: {};

if (initialReceiverUsername && !initialReceiverUser.length) {
	alerts.push({ type: 'error', message: 'Invalid username.' });
	initialReceiverUsername = undefined;
}

const initialOfferedCards = offeredCardIds
	? parseCardIdListFromString(offeredCardIds, cardInstances)
	: undefined;
const initialRequestedCards = requestedCardIds
	? parseCardIdListFromString(requestedCardIds, initialReceiverCards)
	: undefined;

function parseCardIdListFromString(cardIdList: string[], cardInstances: CardInstance[]) {
	const cards = [];
	for (const cardId of cardIdList) {
		const card = cardInstances.find(cardInstance => cardInstance.instanceId === cardId);
		if (card) cards.push(card);
	}
	return cards;
}
---

<Page
	wide
	title="New Trade"
	{alerts}
	pageType="user"
	breadcrumbs={[{ label: routeNames.TRADES, href: routes.TRADES }, { label: 'New Trade' }]}>
	<PageHeader>
		<PageTitle>New Trade</PageTitle>
	</PageHeader>
	<NewTrade
		{userId}
		{username}
		{cardInstances}
		{initialOfferedCards}
		{initialRequestedCards}
		{initialReceiverUsername}
		{initialReceiverCards}
		{rarityRanking}
		client:only="solid-js"
	/>
</Page>
