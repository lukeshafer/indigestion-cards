---
// UI
import { PageHeader, PageTitle } from '@site/components/text';
import { routeNames, routes } from '@site/constants';
import Page, { type Props as PageProps } from '@site/layouts/Page.astro';
import NewTrade from '@site/components/trades/NewTrade';
import { getUser, getUserAndOpenedCardInstances } from '@core/lib/user';
import type { CardInstance, PackCardsHidden } from '@core/types';
import { getRarityRanking } from '@core/lib/site-config';
import { getPacksByUsername, hidePackCards } from '@core/lib/pack';

const { userId } = Astro.locals.user?.properties || {};

if (!userId) {
	return Astro.redirect('/?alert=You must be logged in to view this page.&type=error');
}

const { username } = (await getUser(userId)) || {};

if (!username) {
	return Astro.redirect('/?alert=You must be logged in to view this page.&type=error');
}

const alerts: PageProps['alerts'] = [];

const searchParams = Astro.url.searchParams;
const offeredCardIds = searchParams.getAll('offeredCards');
const requestedCardIds = searchParams.getAll('requestedCards');
const offeredPackIds = searchParams.getAll('offeredPacks');
const requestedPackIds = searchParams.getAll('requestedPacks');
let initialReceiverUsername = searchParams.get('receiverUsername') ?? undefined;

const rarityRanking = getRarityRanking(Astro.locals.siteConfig);

const { CardInstances: cardInstances = [] } =
	(await getUserAndOpenedCardInstances({ username })) ?? {};
const packs = await getPacksByUsername({ username }).then(packs => packs.map(hidePackCards));
const { CardInstances: initialReceiverCards = [], Users: initialReceiverUser = [] } =
	initialReceiverUsername
		? ((await getUserAndOpenedCardInstances({ username: initialReceiverUsername })) ?? {})
		: {};
const initialReceiverPacks = initialReceiverUsername
	? await getPacksByUsername({ username: initialReceiverUsername }).then(packs =>
			packs.map(hidePackCards)
		)
	: [];

if (initialReceiverUsername && !initialReceiverUser.length) {
	alerts.push({ type: 'error', message: 'Invalid username.' });
	initialReceiverUsername = undefined;
}

const initialOfferedCards = offeredCardIds
	? parseValidCardsFromCardIdList(offeredCardIds, cardInstances)
	: undefined;
const initialRequestedCards = requestedCardIds
	? parseValidCardsFromCardIdList(requestedCardIds, initialReceiverCards)
	: undefined;

const initialOfferedPacks = offeredPackIds
	? parseValidPacksFromPackIdList(offeredPackIds, packs)
	: undefined;
const initialRequestedPacks = requestedPackIds
	? parseValidPacksFromPackIdList(requestedPackIds, packs)
	: undefined;

function parseValidCardsFromCardIdList(cardIdList: string[], cardInstances: CardInstance[]) {
	const cards = [];
	for (const cardId of cardIdList) {
		const card = cardInstances.find(cardInstance => cardInstance.instanceId === cardId);
		if (card) cards.push(card);
	}
	return cards;
}
function parseValidPacksFromPackIdList(packIdList: string[], packs: PackCardsHidden[]) {
	const validPacks = [];
	for (const packId of packIdList) {
		const pack = packs.find(pack => pack.packId === packId);
		if (pack) validPacks.push(pack);
	}
	return validPacks;
}
---

<Page
	wide
	title="New Trade"
	{alerts}
	pageType="user"
	breadcrumbs={[{ label: routeNames.TRADES, href: routes.TRADES }, { label: 'New Trade' }]}>
	<PageHeader>
		<PageTitle>New Trade</PageTitle>
	</PageHeader>
	<NewTrade
		{userId}
		{username}
		{cardInstances}
		{packs}
		{initialOfferedCards}
		{initialRequestedCards}
		{initialReceiverUsername}
		{initialReceiverCards}
		{initialOfferedPacks}
		{initialRequestedPacks}
		{initialReceiverPacks}
		{rarityRanking}
		client:only="solid-js"
	/>
</Page>
