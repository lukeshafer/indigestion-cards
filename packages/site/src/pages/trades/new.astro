---
// UI
import { PageHeader, PageTitle } from '@/components/text';
import { routeNames, routes } from '@/constants';
import Page from '@/layouts/Page.astro';
import NewTrade from '@/components/trades/NewTrade';
import { getUserAndCardInstances } from '@lil-indigestion-cards/core/lib/user';
import type { CardInstance } from '@lil-indigestion-cards/core/db/cardInstances';

const { userId, username } = Astro.locals.user?.properties || {};

const body = await Astro.request.text().then((text) => new URLSearchParams(text));
console.log(body);

if (!userId || !username) {
	return Astro.redirect('/?alert=You must be logged in to view this page.&type=error');
}

const searchParams = Astro.url.searchParams;
const offeredCardIds = searchParams.getAll('offeredCards');
const requestedCardIds = searchParams.getAll('requestedCards');
let initialReceiverUsername = searchParams.get('receiverUsername') ?? undefined;

const { cardInstances = [] } = (await getUserAndCardInstances({ username })) ?? {};
const { cardInstances: initialReceiverCards = [], users: initialReceiverUser = [] } =
	initialReceiverUsername
		? (await getUserAndCardInstances({ username: initialReceiverUsername })) ?? {}
		: {};

let invalidUsername = false;
if (initialReceiverUsername && !initialReceiverUser.length) {
	invalidUsername = true;
	initialReceiverUsername = undefined;
}

const initialOfferedCards = offeredCardIds
	? parseCardIdListFromString(offeredCardIds, cardInstances)
	: undefined;
const initialRequestedCards = requestedCardIds
	? parseCardIdListFromString(requestedCardIds, initialReceiverCards)
	: undefined;

function parseCardIdListFromString(cardIdList: string[], cardInstances: CardInstance[]) {
	const cards = [];
	for (const cardId of cardIdList) {
		const card = cardInstances.find((cardInstance) => cardInstance.instanceId === cardId);
		if (card) cards.push(card);
	}
	return cards;
}
---

<Page
	wide
	title="New Trade"
	alerts={invalidUsername ? [{ type: 'error', message: 'Invalid username.' }] : []}
	breadcrumbs={[{ label: routeNames.TRADES, href: routes.TRADES }, { label: 'New Trade' }]}>
	<PageHeader>
		<PageTitle>New Trade</PageTitle>
	</PageHeader>
	<NewTrade
		{userId}
		{username}
		{cardInstances}
		{initialOfferedCards}
		{initialRequestedCards}
		{initialReceiverUsername}
		{initialReceiverCards}
		client:load
	/>
</Page>
