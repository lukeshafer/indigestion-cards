---
import { DeleteButton, Form, SubmitButton, Anchor } from '@site/components/form/Form';
import { Heading } from '@site/components/text';
import OfferWindow from '@site/components/trades/OfferWindow';
import TradeMessageHistory from '@site/components/trades/TradeMessageHistory';
import { routeNames, routes } from '@site/constants';
import Page from '@site/layouts/Page.astro';
import { removeTradeNotification } from '@core/lib/user';
import { getTrade } from '@core/lib/trades';
import { Show } from 'solid-js';
import { formatTradeLink } from '@site/lib/client/utils';

const userId = Astro.locals.session?.properties.userId || undefined;

const tradeId = Astro.params.tradeId;
if (!tradeId) {
	return Astro.redirect('/trades?alert=Invalid trade ID&type=error');
}

const trade = await getTrade(tradeId);
if (!trade) {
	return Astro.redirect('/trades?alert=Trade not found&type=error');
}

const isSender = trade.senderUserId.toLowerCase() === userId?.toLowerCase();
const isReceiver = trade.receiverUserId.toLowerCase() === userId?.toLowerCase();

if (
	userId &&
	(isSender || isReceiver) &&
	Astro.request.headers.get('purpose')?.toLowerCase() !== 'prefetch'
) {
	await removeTradeNotification({ userId, tradeId });
}

const tradeStatus = (() => {
	switch (trade.status) {
		case 'pending':
			if (isReceiver) return 'Awaiting your response';
			else return `Awaiting ${trade.receiverUsername}'s response`;
		case 'rejected':
			if (isReceiver) return 'Rejected by you';
			return `Rejected by ${trade.receiverUsername}`;
		case 'accepted':
			if (isReceiver) return 'Accepted, trade processing...';
			else if (isSender) return `${trade.receiverUsername} accepted your trade!`;
			else return `${trade.receiverUsername} accepted the trade`;
		case 'canceled':
			return `Canceled by ${isSender ? 'you' : trade.senderUsername}`;
		case 'completed':
			return 'Trade completed';
		case 'failed':
			return 'Trade failed';
	}
})();
---

<Page
	title="Trades"
	pageType="public"
	breadcrumbs={userId
		? [{ label: routeNames.TRADES, href: routes.TRADES }, { label: 'Trade' }]
		: [{ label: routeNames.TRADES }, { label: 'Trade' }]}>
	<br />
	<div class="grid-wrapper grid gap-2">
		<style>
			.grid-wrapper {
				grid-template-columns: 1fr 1fr;
				@container main (max-width: 600px) {
					grid-template-columns: 1fr;
				}
			}
		</style>
		<div class="col-span-full text-center">
			<Heading classList={{ grid: true }}>
				<span>STATUS</span>
				<span
					class="text-xl"
					class:list={{
						'text-brand-dark dark:text-brand-main':
							trade.status === 'accepted' || trade.status === 'completed',
						'text-gray-500 dark:text-gray-400': trade.status === 'pending',
						'text-red-700 dark:text-red-500':
							trade.status === 'rejected' ||
							trade.status === 'canceled' ||
							trade.status === 'failed',
					}}>{tradeStatus}</span
				>
				{
					trade.statusMessage ? (
						<p
							class:list={{
								'text-brand-dark dark:text-brand-main':
									trade.status === 'accepted' || trade.status === 'completed',
								'text-gray-500 dark:text-gray-400': trade.status === 'pending',
								'text-red-700 dark:text-red-500':
									trade.status === 'rejected' ||
									trade.status === 'canceled' ||
									trade.status === 'failed',
							}}>
							{trade.statusMessage}
						</p>
					) : null
				}
			</Heading>
		</div>
		<div class="text-center">
			<h2 class="font-heading my-2 text-xl font-semibold text-gray-800 dark:text-gray-200">
				{isSender ? 'Your offer' : `${trade.senderUsername}'s offer`}
			</h2>
			<OfferWindow cards={trade.offeredCards} client:load />
		</div>
		<div class="text-center">
			<h2 class="font-heading my-2 text-xl font-semibold text-gray-800 dark:text-gray-200">
				{isReceiver ? 'Requested from you' : `Requested from ${trade.receiverUsername}`}
			</h2>
			<OfferWindow cards={trade.requestedCards} client:load />
		</div>
		<TradeMessageHistory {trade} loggedInUserId={userId} client:load />
		<Show when={trade.status === 'pending'}>
			<div class="col-span-full justify-self-center">
				{
					isSender ? (
						<Form
							client:load
							method="post"
							enctype="application/x-www-form-urlencoded"
							action={`/api/trades/update-trade/${trade.tradeId}`}>
							<input type="hidden" name="status" value="canceled" />
							<DeleteButton>Cancel offer</DeleteButton>
						</Form>
					) : isReceiver ? (
						<div class="flex flex-wrap justify-center justify-items-center gap-2">
							<Form
								client:load
								method="post"
								class="w-fit"
								enctype="application/x-www-form-urlencoded"
								action={`/api/trades/update-trade/${trade.tradeId}`}>
								<input type="hidden" name="status" value="accepted" />
								<SubmitButton
									confirm="Are you sure you want to accept this trade? Once accepted, the trade is final and cannot be reversed."
									client:idle>
									<div class="min-w-[8rem]">Accept offer</div>
								</SubmitButton>
							</Form>
							<Form
								client:load
								method="post"
								class="w-fit"
								enctype="application/x-www-form-urlencoded"
								action={`/api/trades/update-trade/${trade.tradeId}`}>
								<input type="hidden" name="status" value="rejected" />
								<DeleteButton
									confirm="Are you sure you want to reject this trade?"
									client:idle>
									<div class="min-w-[8rem]">Reject offer</div>
								</DeleteButton>
							</Form>
						</div>
					) : null
				}
			</div>
		</Show>
    {isSender || isReceiver ? (
      <div class="col-span-2 mx-auto w-fit">
        <Anchor href={formatTradeLink(trade, isReceiver)}>Create Similar Trade</Anchor>
      </div>
    ) : null}
	</div>

	<trade-fetcher trade-id={trade.tradeId} status={trade.status}></trade-fetcher>
	<script>
		import { get } from '@/lib/client/data';

		customElements.define(
			'trade-fetcher',
			class TradeFetcher extends HTMLElement {
				tradeId: string;
				status: string;
				constructor() {
					super();
					this.tradeId = this.getAttribute('trade-id') || '';
					this.status = this.getAttribute('status') || '';
				}

				connectedCallback() {
					const createTimeout = (time = 1000) => {
						setTimeout(() => {
							this.refreshIfTradeStatusUpdated();
							if (time < 128000) createTimeout(time * 2);
						}, time);
					};
					createTimeout();
				}

				async refreshIfTradeStatusUpdated() {
					const trade = await get('trades', [this.tradeId]);
					if (this.status !== trade.status) location.reload();
				}
			}
		);
	</script>
</Page>
