---
import { DeleteButton, Form, SubmitButton } from '@/components/form/Form';
import { Heading } from '@/components/text';
import OfferWindow from '@/components/trades/OfferWindow';
import { USER_API, routeNames, routes } from '@/constants';
import Page from '@/layouts/Page.astro';

import { getTrade } from '@lil-indigestion-cards/core/lib/trades';
import { Show } from 'solid-js';

const tradeId = Astro.params.tradeId;
if (!tradeId) {
	return Astro.redirect('/trades?alert=Invalid trade ID&type=error');
}

const trade = await getTrade(tradeId);
if (!trade) {
	return Astro.redirect('/trades?alert=Trade not found&type=error');
}

const username = Astro.locals.user?.properties.username;
const isSender = trade.senderUsername === username;
const isReceiver = trade.receiverUsername === username;

const tradeStatus = (() => {
	switch (trade.status) {
		case 'pending':
			if (isReceiver) return 'Awaiting your response';
			else return `Awaiting ${trade.receiverUsername}'s response`;
		case 'rejected':
			return 'Rejected by receiver';
		case 'accepted':
			if (isReceiver) return 'Accepted, trade complete!';
			else if (isSender) return `${trade.receiverUsername} accepted your trade!`;
			else return `${trade.receiverUsername} accepted the trade`;
		case 'canceled':
			return `Canceled by ${isSender ? 'you' : trade.senderUsername}`;
	}
})();
---

<Page
	title="Trades"
	pageType="user"
	breadcrumbs={[{ label: routeNames.TRADES, href: routes.TRADES }, { label: 'Trade' }]}>
	<br />
	<div class="grid-wrapper grid">
		<style>
			.grid-wrapper {
				grid-template-columns: 1fr 1fr;
				@container main (max-width: 600px) {
					grid-template-columns: 1fr;
				}
			}
		</style>
		<div class="col-span-full text-center">
			<Heading classList={{ grid: true }}>
				<span>STATUS</span>
				<span
					class="text-xl"
					class:list={{
						'text-brand-dark dark:text-brand-main': trade.status === 'accepted',
						'text-gray-500 dark:text-gray-400': trade.status === 'pending',
						'text-red-700 dark:text-red-500':
							trade.status === 'rejected' || trade.status === 'canceled',
					}}>{tradeStatus}</span
				>
			</Heading>
		</div>
		<div class="text-center">
			<h2 class="font-heading my-2 text-xl font-semibold text-gray-800 dark:text-gray-200">
				{isSender ? 'Your offer' : `${trade.senderUsername}'s offer`}
			</h2>
			<OfferWindow cards={trade.offeredCards} client:load />
		</div>
		<div class="text-center">
			<h2 class="font-heading my-2 text-xl font-semibold text-gray-800 dark:text-gray-200">
				{isReceiver ? 'Requested from you' : `Requested from ${trade.receiverUsername}`}
			</h2>
			<OfferWindow cards={trade.requestedCards} client:load />
		</div>
		<ul
			class="col-span-full grid min-h-[8rem] w-[32rem] max-w-full gap-3 justify-self-center rounded-lg bg-gray-200 px-6 py-4 dark:bg-gray-900">
			{
				trade.messages.map((msg) => {
					const isFromSender = msg.userId === trade.senderUserId;
					const username = isFromSender ? trade.senderUsername : trade.receiverUsername;
					return (
						<li
							class="min-h-[5rem] w-fit max-w-[15rem] rounded-md bg-gray-50 px-3 py-2 dark:bg-gray-800"
							class:list={{
								'justify-self-start': isFromSender,
								'justify-self-end': !isFromSender,
							}}>
							<p
								class="font-semibold text-gray-600 dark:text-gray-400"
								class:list={{ 'text-right': !isFromSender }}>
								{username}
							</p>
							<p
								class="pb-1 "
								class:list={{
									'text-right': !isFromSender,
									'text-red-600 dark:text-red-400':
										!isFromSender && trade.status === 'rejected',
									'text-brand-dark dark:text-brand-main':
										!isFromSender && trade.status !== 'rejected',
									'text-blue-600 dark:text-blue-400': isFromSender,
								}}>
								{isFromSender
									? 'Request'
									: trade.status === 'rejected'
									? 'Rejected'
									: trade.status === 'accepted'
									? 'Accepted'
									: 'Response'}
							</p>
							<p class="message">{msg.message}</p>
						</li>
					);
				})
			}
		</ul>
		<Show when={trade.status === 'pending'}>
			<div class="col-span-full justify-self-center">
				{
					isSender ? (
						<Form action={USER_API.TRADE} method="patch" client:load>
							<input type="hidden" name="tradeId" value={trade.tradeId} />
							<input type="hidden" name="status" value="canceled" />
							<DeleteButton>Cancel offer</DeleteButton>
						</Form>
					) : isReceiver ? (
						<>
							<Form action={USER_API.TRADE} method="patch" client:load>
								<input type="hidden" name="tradeId" value={trade.tradeId} />
								<input type="hidden" name="status" value="accepted" />
								<SubmitButton>Accept offer</SubmitButton>
							</Form>
							<Form action={USER_API.TRADE} method="patch" client:load>
								<input type="hidden" name="tradeId" value={trade.tradeId} />
								<input type="hidden" name="status" value="rejected" />
								<DeleteButton>Reject offer</DeleteButton>
							</Form>
						</>
					) : null
				}
			</div>
		</Show>
	</div>
</Page>
