---
import { DeleteButton, SubmitButton } from '@/components/form/Form';
import { Heading } from '@/components/text';
import OfferWindow from '@/components/trades/OfferWindow';
import TradeMessageHistory from '@/components/trades/TradeMessageHistory'
import { routeNames, routes } from '@/constants';
import Page, { type Props as PageProps } from '@/layouts/Page.astro';
import { InputValidationError } from '@lil-indigestion-cards/core/lib/errors';

import { getTrade, updateTradeStatus } from '@lil-indigestion-cards/core/lib/trades';
import { Show } from 'solid-js';

const alerts: PageProps['alerts'] = [];

const username = Astro.locals.user?.properties.username;
const userId = Astro.locals.user?.properties.userId;
if (!username || !userId) {
	return Astro.redirect('/?alert=You must be logged in to view this page.&type=error');
}

const tradeId = Astro.params.tradeId;
if (!tradeId) {
	return Astro.redirect('/trades?alert=Invalid trade ID&type=error');
}

if (Astro.request.method === 'POST') {
	const body = new URLSearchParams(await Astro.request.text());
	const status = body.get('status');
	if (!status) alerts.push({ type: 'error', message: 'No update status provided.' });
	else
		try {
			await updateTradeStatus({
				tradeId,
				status,
				loggedInUserId: userId,
			});
		} catch (err) {
			if (err instanceof InputValidationError) {
				alerts.push({ type: 'error', message: err.message });
			} else {
				console.error(err);
				alerts.push({
					type: 'error',
					message: 'An error occurred while updating the trade.',
				});
			}
		}
}

const trade = await getTrade(tradeId);
if (!trade) {
	return Astro.redirect('/trades?alert=Trade not found&type=error');
}

const isSender = trade.senderUsername === username;
const isReceiver = trade.receiverUsername === username;

const tradeStatus = (() => {
	switch (trade.status) {
		case 'pending':
			if (isReceiver) return 'Awaiting your response';
			else return `Awaiting ${trade.receiverUsername}'s response`;
		case 'rejected':
			if (isReceiver) return 'Rejected by you'
			return `Rejected by ${trade.receiverUsername}`;
		case 'accepted':
			if (isReceiver) return 'Accepted, trade processing...';
			else if (isSender) return `${trade.receiverUsername} accepted your trade!`;
			else return `${trade.receiverUsername} accepted the trade`;
		case 'canceled':
			return `Canceled by ${isSender ? 'you' : trade.senderUsername}`;
		case 'completed':
			return 'Trade completed';
	}
})();
---

<Page
	title="Trades"
	pageType="user"
	breadcrumbs={[{ label: routeNames.TRADES, href: routes.TRADES }, { label: 'Trade' }]}>
	<br />
	<div class="grid-wrapper grid gap-2">
		<style>
			.grid-wrapper {
				grid-template-columns: 1fr 1fr;
				@container main (max-width: 600px) {
					grid-template-columns: 1fr;
				}
			}
		</style>
		<div class="col-span-full text-center">
			<Heading classList={{ grid: true }}>
				<span>STATUS</span>
				<span
					class="text-xl"
					class:list={{
						'text-brand-dark dark:text-brand-main':
							trade.status === 'accepted' || trade.status === 'completed',
						'text-gray-500 dark:text-gray-400': trade.status === 'pending',
						'text-red-700 dark:text-red-500':
							trade.status === 'rejected' || trade.status === 'canceled',
					}}>{tradeStatus}</span
				>
			</Heading>
		</div>
		<div class="text-center">
			<h2 class="font-heading my-2 text-xl font-semibold text-gray-800 dark:text-gray-200">
				{isSender ? 'Your offer' : `${trade.senderUsername}'s offer`}
			</h2>
			<OfferWindow cards={trade.offeredCards} client:load />
		</div>
		<div class="text-center">
			<h2 class="font-heading my-2 text-xl font-semibold text-gray-800 dark:text-gray-200">
				{isReceiver ? 'Requested from you' : `Requested from ${trade.receiverUsername}`}
			</h2>
			<OfferWindow cards={trade.requestedCards} client:load />
		</div>
		<TradeMessageHistory {trade} client:load />
		<Show when={trade.status === 'pending'}>
			<div class="col-span-full justify-self-center">
				{
					isSender ? (
						<form method="post">
							<input type="hidden" name="tradeId" value={trade.tradeId} />
							<input type="hidden" name="status" value="canceled" />
							<DeleteButton>Cancel offer</DeleteButton>
						</form>
					) : isReceiver ? (
						<>
							<form method="post">
								<input type="hidden" name="tradeId" value={trade.tradeId} />
								<input type="hidden" name="status" value="accepted" />
								<SubmitButton>Accept offer</SubmitButton>
							</form>
							<form method="post">
								<input type="hidden" name="tradeId" value={trade.tradeId} />
								<input type="hidden" name="status" value="rejected" />
								<DeleteButton>Reject offer</DeleteButton>
							</form>
						</>
					) : null
				}
			</div>
		</Show>
	</div>
</Page>
