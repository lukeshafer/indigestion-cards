---
import { Anchor } from '@site/components/Form';
import { Heading } from '@site/components/text';
import OfferWindow from '@site/components/trades/OfferWindow';
import TradeMessageHistory from '@site/components/trades/TradeMessageHistory';
import { routeNames, routes } from '@site/constants';
import Page from '@site/layouts/Page.astro';
import { removeTradeNotification } from '@core/lib/user';
import { getTrade } from '@core/lib/trades';
import { Show } from 'solid-js';
import { TradeForms } from '@site/components/trades/TradeForms';
import type { Trade } from '@core/types';
import { getPackById } from '@core/lib/pack';

const userId = Astro.locals.session?.properties.userId || undefined;

const tradeId = Astro.params.tradeId;
if (!tradeId) {
	return Astro.redirect('/trades?alert=Invalid trade ID&type=error');
}

const trade = await getTrade(tradeId);
if (!trade) {
	return Astro.redirect('/trades?alert=Trade not found&type=error');
}

const isSender = trade.senderUserId.toLowerCase() === userId?.toLowerCase();
const isReceiver = trade.receiverUserId.toLowerCase() === userId?.toLowerCase();

const offeredPacks = await Promise.all(
	trade.offeredPacks?.map(pack => getPackById({ packId: pack.packId })) ?? []
);
const requestedPacks = await Promise.all(
	trade.requestedPacks?.map(pack => getPackById({ packId: pack.packId })) ?? []
);

if (
	userId &&
	(isSender || isReceiver) &&
	Astro.request.headers.get('purpose')?.toLowerCase() !== 'prefetch'
) {
	await removeTradeNotification({ userId, tradeId });
}

const tradeStatus = (() => {
	switch (trade.status) {
		case 'pending':
			if (isReceiver) return 'Awaiting your response';
			else return `Awaiting ${trade.receiverUsername}'s response`;
		case 'rejected':
			if (isReceiver) return 'Rejected by you';
			return `Rejected by ${trade.receiverUsername}`;
		case 'accepted':
			if (isReceiver) return 'Accepted, trade processing...';
			else if (isSender) return `${trade.receiverUsername} accepted your trade!`;
			else return `${trade.receiverUsername} accepted the trade`;
		case 'canceled':
			return `Canceled by ${isSender ? 'you' : trade.senderUsername}`;
		case 'completed':
			return 'Trade completed';
		case 'failed':
			return 'Trade failed';
	}
})();

function formatTradeLink(trade: Trade, reverse = false): string {
	const params = new URLSearchParams({
		receiverUsername: reverse ? trade.senderUsername : trade.receiverUsername,
	});

	trade.requestedCards.forEach(c =>
		params.append(reverse ? 'offeredCards' : 'requestedCards', c.instanceId)
	);
	trade.offeredCards.forEach(c =>
		params.append(reverse ? 'requestedCards' : 'offeredCards', c.instanceId)
	);
	trade.requestedPacks?.forEach(p =>
		params.append(reverse ? 'offeredPacks' : 'requestedPacks', p.packId)
	);
	trade.offeredPacks?.forEach(p =>
		params.append(reverse ? 'requestedPacks' : 'offeredPacks', p.packId)
	);

	return routes.TRADES + '/new?' + params.toString();
}
---

<Page
	title="Trades"
	pageType="public"
	breadcrumbs={userId
		? [{ label: routeNames.TRADES, href: routes.TRADES }, { label: 'Trade' }]
		: [{ label: routeNames.TRADES }, { label: 'Trade' }]}>
	<br />
	<div class="grid-wrapper grid gap-2">
		<style>
			.grid-wrapper {
				grid-template-columns: 1fr 1fr;
				@container main (max-width: 600px) {
					grid-template-columns: 1fr;
				}
			}
		</style>
		<div class="col-span-full text-center">
			<Heading classList={{ grid: true }}>
				<span>STATUS</span>
				<span
					class="font-heading text-xl"
					class:list={{
						'text-brand-dark dark:text-brand-main':
							trade.status === 'accepted' || trade.status === 'completed',
						'text-gray-500 dark:text-gray-400': trade.status === 'pending',
						'text-red-700 dark:text-red-500':
							trade.status === 'rejected' ||
							trade.status === 'canceled' ||
							trade.status === 'failed',
					}}>{tradeStatus}</span
				>
				{
					trade.statusMessage ? (
						<p
							class:list={{
								'text-brand-dark dark:text-brand-main':
									trade.status === 'accepted' || trade.status === 'completed',
								'text-gray-500 dark:text-gray-400': trade.status === 'pending',
								'text-red-700 dark:text-red-500':
									trade.status === 'rejected' ||
									trade.status === 'canceled' ||
									trade.status === 'failed',
							}}>
							{trade.statusMessage}
						</p>
					) : null
				}
			</Heading>
		</div>
		<div class="text-center">
			<h2 class="font-heading my-2 text-xl font-semibold text-gray-800 dark:text-gray-200">
				{isSender ? 'Your offer' : `${trade.senderUsername}'s offer`}
			</h2>
			<OfferWindow cards={trade.offeredCards} packs={offeredPacks} client:load />
		</div>
		<div class="text-center">
			<h2 class="font-heading my-2 text-xl font-semibold text-gray-800 dark:text-gray-200">
				{isReceiver ? 'Requested from you' : `Requested from ${trade.receiverUsername}`}
			</h2>
			<OfferWindow cards={trade.requestedCards} packs={requestedPacks} client:load />
		</div>
		<TradeMessageHistory {trade} loggedInUserId={userId} client:load />
		<Show when={trade.status === 'pending'}>
			<TradeForms
				isSender={isSender}
				isReceiver={isReceiver}
				tradeId={trade.tradeId}
				client:load
			/>
		</Show>
		<Show when={isSender || isReceiver}>
			<div class="col-span-full mx-auto w-fit">
				<Anchor href={formatTradeLink(trade, isReceiver)}>Create Similar Trade</Anchor>
			</div>
		</Show>
	</div>

	<trade-fetcher trade-id={trade.tradeId} status={trade.status}></trade-fetcher>
	<script>
		import { trpc } from '@site/client/api';

		customElements.define(
			'trade-fetcher',
			class TradeFetcher extends HTMLElement {
				tradeId: string;
				status: string;
				constructor() {
					super();
					this.tradeId = this.getAttribute('trade-id') || '';
					this.status = this.getAttribute('status') || '';
				}

				connectedCallback() {
					const createTimeout = (time = 1000) => {
						setTimeout(() => {
							this.refreshIfTradeStatusUpdated();
							if (time < 128000) createTimeout(time * 2);
						}, time);
					};
					createTimeout();
				}

				async refreshIfTradeStatusUpdated() {
					const trade = await trpc.trades.byId.query({ tradeId: this.tradeId });
					if (this.status !== trade.status) location.reload();
				}
			}
		);
	</script>
</Page>
