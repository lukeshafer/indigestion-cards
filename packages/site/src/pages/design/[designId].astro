---
import PostButton from '@/components/form/PostButton.astro';
import Page from '@/layouts/Page.astro';
import TradingCard from '@/components/TradingCard.astro';
import { useAdmin } from '@/session';
import { getCardDesignAndInstancesById } from '@lil-indigestion-cards/core/card';
import { routes, api } from '@/constants';

const admin = useAdmin(Astro.cookies);
if (!admin) return Astro.redirect('/404');

const designId = Astro.params.designId;

const from = Astro.request.headers.get('referer');
console.log({ designId, from });

if (!designId) {
	return Astro.redirect(routes.DESIGNS + '?alert=No design id provided');
}

console.log('test');
const {
	cardDesigns: [design],
	cardInstances,
} = await getCardDesignAndInstancesById({ designId });
const openedCards = cardInstances.filter((card) => card.openedAt !== undefined);

type CardInstance = (typeof cardInstances)[number];

if (!design) {
	return Astro.redirect(`${routes.DESIGNS}?error=Design ${designId} not found`);
}

const breadcrumbs = [{ label: 'Home', href: '/' }];

if (from?.includes('season')) {
	breadcrumbs.push(
		{ label: 'Seasons', href: routes.SEASONS },
		{ label: design.seasonName, href: `${routes.SEASONS}/${design.seasonId}` },
		{ label: design.cardName, href: `${routes.DESIGNS}/${designId}` }
	);
} else {
	breadcrumbs.push(
		{ label: 'Designs', href: routes.DESIGNS },
		{ label: design.cardName, href: `${routes.DESIGNS}/${designId}` }
	);
}

const instancesByRarity = cardInstances.reduce((acc, instance) => {
	const rarityId = instance.rarityId;
	if (!acc[rarityId])
		acc[rarityId] = new Array<CardInstance | null>(instance.totalOfType).fill(null);
	acc[rarityId]![instance.cardNumber - 1] = instance;
	return acc;
}, {} as Record<string, Array<CardInstance | null>>);
---

<Page
	title={`${design.cardName} - ${design.seasonName}`}
	class="flex flex-col gap-4"
	session={admin}
	breadcrumbs={breadcrumbs}>
	<h1 class="text-3xl font-display italic my-3">{design.cardName}</h1>
	<div class="mx-4">
		<TradingCard>
			<img src={design.imgUrl} width="300" class="max-w-full" />
		</TradingCard>
	</div>
	{design.cardDescription ? <p class="text-lg  max-w-sm">{design.cardDescription}</p> : null}
	<section class="text-lg">
		<h2 class="sub-heading">Stats:</h2>
		<ul>
			{
				design.rarityDetails?.map((rarity) => (
					<li>
						{rarity.rarityName}:
						<ul>
							{instancesByRarity[rarity.rarityId]?.map((instance, index, arr) => (
								<li>
									{index + 1} of {arr.length}
									{instance === null ? (
										<span class="text-gray-400">Not owned</span>
									) : (
										<a href={`${routes.USERS}/${instance.username}`}>
											<span class="font-semibold">{instance.username}</span>
											{instance.openedAt
												? ` - ${new Date(
														instance.openedAt
												  ).toLocaleDateString()}`
												: ' - Unopened'}
										</a>
									)}
								</li>
							))}
						</ul>
					</li>
				))
			}
		</ul>
	</section>
	<PostButton
		type="delete"
		id="delete-design-form"
		url={`${api.DELETE_CARD_DESIGN}/${designId}?redirect=${routes.DESIGNS}`}
		label="Delete Card"
	/>
</Page>

<script>
	const form = document.getElementById('delete-design-form') as HTMLFormElement;

	form.addEventListener('submit', async (e) => {
		// prevent default, confirm, then resume
		const confirmation = confirm('Are you sure you want to delete this design?');
		if (!confirmation) e.preventDefault();
	});
</script>
