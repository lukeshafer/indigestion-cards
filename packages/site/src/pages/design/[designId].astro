---
import Page from '@/layouts/Page.astro';
import TradingCard from '@/components/TradingCard.astro';
import { getCardDesignAndInstancesById } from '@lil-indigestion-cards/core/card';
import { routes, api } from '@/constants';
import AdminOnly from '@/components/AdminOnly.astro';
import RarityStatsTable from '@/components/RarityStatsTable.astro';

const designId = Astro.params.designId;

const from = Astro.request.headers.get('referer');

if (!designId) {
	return Astro.redirect(routes.DESIGNS + '?alert=No design id provided');
}

const {
	cardDesigns: [design],
	cardInstances,
} = await getCardDesignAndInstancesById({ designId });

type CardInstance = (typeof cardInstances)[number];

if (!design) {
	return Astro.redirect(`${routes.DESIGNS}?error=Design ${designId} not found`);
}

const breadcrumbs = [{ label: 'Home', href: '/' }];

if (from?.includes('season')) {
	breadcrumbs.push(
		{ label: 'Seasons', href: routes.SEASONS },
		{ label: design.seasonName, href: `${routes.SEASONS}/${design.seasonId}` },
		{ label: design.cardName, href: `${routes.DESIGNS}/${designId}` }
	);
} else {
	breadcrumbs.push(
		{ label: 'Designs', href: routes.DESIGNS },
		{ label: design.cardName, href: `${routes.DESIGNS}/${designId}` }
	);
}

export interface RarityStats {
	rarityId: string;
	rarityName: string;
	received: number;
	unopened: number;
	opened: number;
	notGivenOut: number;
	total: number;
	instances: Array<CardInstance | null>;
}

const rarityStats = {} as Record<string, RarityStats>;
design.rarityDetails?.forEach((rarity) => {
	rarityStats[rarity.rarityId] = {
		rarityId: rarity.rarityId,
		rarityName: rarity.rarityName,
		received: 0,
		unopened: 0,
		opened: 0,
		notGivenOut: rarity.count,
		total: rarity.count,
		instances: new Array<CardInstance | null>(rarity.count).fill(null),
	};
});

cardInstances.forEach((instance) => {
	const rarityId = instance.rarityId;
	const rarity = rarityStats[rarityId];
	if (!rarity) return;

	rarity.received += 1;
	rarity.unopened += instance.openedAt ? 0 : 1;
	rarity.opened += instance.openedAt ? 1 : 0;
	rarity.notGivenOut -= 1;
	rarity.instances[instance.cardNumber - 1] = instance;
});

const rarityStatsArray = Object.values(rarityStats);
---

<Page
	title={`${design.cardName} - ${design.seasonName}`}
	class="flex flex-col gap-9"
	breadcrumbs={breadcrumbs}>
	<header class="flex flex-col gap-4">
		<h1 class="text-3xl font-display italic my-3">{design.cardName}</h1>
		<div class="mx-4">
			<TradingCard>
				<img src={design.imgUrl} width="300" class="max-w-full" />
			</TradingCard>
		</div>
		{design.cardDescription ? <p class="text-lg  max-w-sm">{design.cardDescription}</p> : null}
	</header>
	<AdminOnly>
		<section class="text-lg">
			<h2 class="sub-heading mb-4">Stats Overview</h2>
			<sort-table class="compact">
				<table>
					<thead>
						<tr>
							<th>Rarity</th>
							<th data-type="number">Received</th>
							<th data-type="number" class="hidden lg:table-cell">Opened</th>
							<th data-type="number" class="hidden lg:table-cell">Unopened</th>
							<th data-type="number" class="hidden sm:table-cell">Not Given Out</th>
							<th data-type="number">Total</th>
						</tr>
					</thead>
					<tbody>
						{
							rarityStatsArray.map((rarity) => (
								<tr>
									<td>{rarity.rarityName}</td>
									<td>{rarity.received}</td>
									<td class="hidden lg:table-cell">{rarity.opened}</td>
									<td class="hidden lg:table-cell">{rarity.unopened}</td>
									<td class="hidden sm:table-cell">{rarity.notGivenOut}</td>
									<td>{rarity.total}</td>
								</tr>
							))
						}
					</tbody>
				</table>
			</sort-table>
		</section>
		<section x-data="{ hideUnowned: false }">
			<header class="flex items-center gap-6">
				<h2 class="sub-heading mb-4">Instance Breakdown</h2>
				<div>
					<input
						type="checkbox"
						x-model="hideUnowned"
						id="hide-unowned"
						class="my-form-checkbox"
					/>
					<label for="hide-unowned">Hide Unowned</label>
				</div>
			</header>
			<ul>
				{rarityStatsArray.map((rarity) => <RarityStatsTable {...rarity} />)}
			</ul>
		</section>
		<button
			class="post-button w-max"
			data-type="delete"
			hx-delete={api.DESIGN.DELETE}
			hx-vals={JSON.stringify({
				designId: design.designId,
				imgUrl: design.imgUrl,
				cardName: design.cardName,
			})}>
			Delete Card
			<form-indicator>Deleting</form-indicator>
		</button>
	</AdminOnly>
</Page>

<script>
	const form = document.getElementById('delete-design-form') as HTMLFormElement;

	form.addEventListener('submit', async (e) => {
		// prevent default, confirm, then resume
		const confirmation = confirm('Are you sure you want to delete this design?');
		if (!confirmation) e.preventDefault();
	});
</script>
