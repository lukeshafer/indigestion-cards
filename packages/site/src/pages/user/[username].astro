---
import CardList from '@/components/cards/CardList';
import Page from '@/layouts/Page.astro';
import { getUserAndCardInstances, createNewUser } from '@lib/user';
import { getUserByLogin } from '@lib/twitch';
import { getRarityRanking, getSiteConfig } from '@lib/site-config';
import { routes, routeNames } from '@/constants';
import { Anchor, Heading } from '@/components/text';
import UserLookingFor from '@/components/user/UserLookingFor';
import Card from '@/components/cards/Card';
import { cachePage } from '@/lib/api';
import type { Props as HeaderProps } from '@/components/Header.astro';

console.log('username page')
type Logo = HeaderProps['logo'];

const redirectCount = Number(Astro.url.searchParams.get('redirect')) || 0;
if (redirectCount > 3) {
	return Astro.redirect(`${routes.USERS}?alert=Username not found`);
}

const id = Astro.params.username;

if (!id) {
	return Astro.redirect(`${routes.USERS}?alert=Username is required`);
}

let [userData, rarityRanking] = await Promise.all([
	getUserAndCardInstances({ username: id }),
	getRarityRanking(),
]);

const twitchData = await getUserByLogin(id).catch(() => null);
if (!userData) {
	if (twitchData) {
		const newUser = await createNewUser({
			username: twitchData.display_name,
			userId: twitchData.id,
		});
		userData = {
			users: [newUser],
			cardInstances: [],
			userLogins: [],
		};
		return Astro.redirect(`${routes.USERS}/${id}?redirect=${redirectCount + 1}`);
	}
	return Astro.redirect(`${routes.USERS}?alert=Username not found`);
}

cachePage(Astro);

const siteConfig = await getSiteConfig();

const { users, cardInstances } = userData;
const user = users[0] || {
	username: id,
	userId: twitchData?.id,
};

const pinnedCard = user.pinnedCard;
const cardsNotInPack = cardInstances.filter(
	card => !!card.openedAt && card.instanceId !== pinnedCard?.instanceId
);

const userLogoMap: Record<string, Logo | undefined> = {
	artifizz: 'tongle',
};
const logo = userLogoMap[id]

const isLoggedInUser = Astro.locals.user?.properties.userId === user.userId;
---

<Page
	title={user.username}
  {logo}
	class="flex flex-col gap-4"
	breadcrumbs={[{ label: routeNames.USER, href: routes.USERS }, { label: user.username }]}
	pageType="public">
	<header class="flex flex-col gap-4 gap-x-8 p-4 sm:flex-row">
		<img
			src={twitchData?.profile_image_url}
			width="150"
			height="150"
			class="col-start-1 row-span-full h-fit rounded-full"
		/>
		<section class="mt-4 flex flex-col">
			<h1
				class="font-display my-2 text-4xl font-bold italic text-gray-600 dark:text-gray-200"
				style={{ 'view-transition-name': `${user.username}-username` }}>
				{user.username}
			</h1>
			<ul>
				<li>
					<UserLookingFor {user} {isLoggedInUser} client:load />
				</li>
				{
					isLoggedInUser || !siteConfig.tradingIsEnabled ? null : (
						<li>
							<Anchor href={`${routes.TRADES}/new?receiverUsername=${user.username}`}>
								New Trade
							</Anchor>
						</li>
					)
				}
			</ul>
		</section>
		{
			pinnedCard && pinnedCard.instanceId ? (
				<div class="ml-auto">
					<p class="text-center font-semibold uppercase text-gray-400">Pinned</p>
					<a
						transition:name={
							pinnedCard.designId === 'lilindheart'
								? 'lilindheart-hero-card'
								: pinnedCard.designId === 'lilindcult'
								? 'lilindcult-hero-card'
								: pinnedCard.designId === 'ryan-of-the-wild'
								? 'ryan-of-the-wild-hero-card'
								: undefined
						}
						href={`${routes.USERS}/${user.username}/${pinnedCard.instanceId}`}>
						<Card {...pinnedCard} scale="var(--card-scale)" client:load />
					</a>
				</div>
			) : null
		}
	</header>
	<section class="my-4 grid gap-4 text-center">
		<Heading>Cards</Heading>
		<CardList
			cards={cardsNotInPack}
			rarityRanking={rarityRanking}
			client:load
			isUserPage
			sortOnlyBy={[
				'rarest',
				'common',
				'card-name-asc',
				'card-name-desc',
				'open-date-asc',
				'open-date-desc',
			]}
		/>
	</section>
</Page>
