---
import CardList from '@/components/CardList.astro';
import Page from '@/layouts/Page.astro';
import { getUserAndCardInstances, createNewUser } from '@lil-indigestion-cards/core/user';
import { getUserByLogin } from '@lil-indigestion-cards/core/twitch-helpers';
import { api, routes } from '@/constants';
import AdminOnly from '@/components/AdminOnly.astro';
import { getAllPackTypes } from '@lil-indigestion-cards/core/card';

const redirectCount = Number(Astro.url.searchParams.get('redirect')) || 0;
if (redirectCount > 3) return Astro.redirect(`${routes.USERS}?alert=Username not found`);

const id = Astro.params.username;

if (!id) {
	return Astro.redirect(`${routes.USERS}?alert=Username is required`);
}

let data = await getUserAndCardInstances({ username: id });

const twitchData = await getUserByLogin(id);
if (!data) {
	if (twitchData) {
		const newUser = await createNewUser({
			username: twitchData.display_name,
			userId: twitchData.id,
		});
		data = {
			users: [newUser],
			cardInstances: [],
		};
		return Astro.redirect(`${routes.USERS}/${id}?redirect=${redirectCount + 1}`);
	}
	return Astro.redirect(`${routes.USERS}?alert=Username not found`);
}

const { users, cardInstances } = data;
const user = users[0]!;

const cardsNotInPack = cardInstances.filter((card) => !!card.openedAt);

const breadcrumbs = [
	{ label: 'Home', href: '/' },
	{ label: 'Users', href: routes.USERS },
	{ label: user.username },
];

const packTypes = await getAllPackTypes();
---

<Page title={user.username} class="flex flex-col gap-4" breadcrumbs={breadcrumbs} pageType="public">
	<header class="flex items-start gap-12 p-4">
		<img
			src={twitchData?.profile_image_url}
			width="200"
			class="rounded-full col-start-1 row-span-full"
		/>
		<AdminOnly>
			<section class="flex flex-col gap-2" slot="fallback">
				<h1 class="page-heading col-start-2">{user.username}</h1>
			</section>
			<section class="flex flex-col gap-2">
				<h1 class="page-heading col-start-2">{user.username}</h1>
				<p class="-mt-5">User Id: {user.userId}</p>
				<div class="w-full flex flex-wrap items-center gap-2 col-start-2">
					<input type="hidden" name="userId" value={user.userId} />
					<input type="hidden" name="username" value={user.username} />

					<select
						id="packTypeSelect"
						name="packType"
						class="w-40 h-full my-form-input"
						required>
						<option value="">Choose Pack</option>
						{
							packTypes.map((packType) => (
								<option value={JSON.stringify(packType)}>
									{packType.packTypeName}
								</option>
							))
						}
					</select>

					<button
						class="post-button"
						data-type="submit"
						hx-post={api.PACK.CREATE}
						hx-include="[name=packType]"
						hx-swap="none"
						hx-vals={JSON.stringify({
							userId: user.userId,
							username: user.username,
						})}>Give Pack</button
					>
				</div>

				<div class="flex flex-wrap items-center gap-2 w-full">
					<h2 class="text-lg">
						Unopened Packs: <span
							hx-get={api.PACK.GET_PACK_COUNT_FOR_USER}
							hx-trigger="refreshCount from:body"
							hx-vals={JSON.stringify({ userId: user.userId })}
							hx-swap="innerHTML transition:false"
							data-value={user.packCount}>{user.packCount}</span
						>
					</h2>
					<button
						class="post-button shine"
						data-type="delete"
						hx-delete={api.PACK.DELETE}
						hx-swap="none"
						hx-vals={JSON.stringify({
							userId: user.userId,
							username: user.username,
						})}>
						Revoke Pack
						<div class="htmx-indicator">Deleting</div>
					</button>
				</div>
			</section>
		</AdminOnly>
	</header>
	<div>
		<h2 class="text-xl pt-4">Cards:</h2>
		<CardList cards={cardsNotInPack} />
	</div>
</Page>
