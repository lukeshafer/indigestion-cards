---
import CardList from '@/components/CardList.astro';
import Page from '@/layouts/Page.astro';
import {
	getPackTypesBySeasonId,
	getSeasonAndDesignsBySeasonId,
} from '@lil-indigestion-cards/core/card';
import { getSiteConfig } from '@lil-indigestion-cards/core/site-config';
import { api, routeNames, routes } from '@/constants';
import PageHeading from '@/components/text/PageHeading.astro';
import SubHeading from '@/components/text/SubHeading.astro';
import DeleteSeasonButton from '@/components/seasons/DeleteSeasonButton';
import PageHeader from '@/components/text/PageHeader.astro';

const id = Astro.params.seasonId;

if (!id) {
	return Astro.redirect(`${routes.SEASONS}?alert=Season ID is required`);
}

const {
	season: [season],
	cardDesigns,
	cardInstances,
} = await getSeasonAndDesignsBySeasonId(id);

if (!season) {
	return Astro.redirect(`${routes.SEASONS}?alert='${id}' does not exist`);
}

const totalPossibleCards = cardDesigns.reduce((acc, card) => {
	return (
		acc +
		(card.rarityDetails?.reduce((acc, rarity) => {
			return acc + rarity.count;
		}, 0) ?? 0)
	);
}, 0);

const ownedCards = cardInstances.length;
const remainingCards = totalPossibleCards - ownedCards;

const packTypes = await getPackTypesBySeasonId({ seasonId: id });
const packTypesWithCardPools = await Promise.all(
	packTypes.map(async (packType) => {
		const totalPossiblePacks = Math.floor(totalPossibleCards / packType.cardCount);
		const openedPacks = ownedCards / packType.cardCount;
		const remainingPacks = Math.floor(remainingCards / packType.cardCount);
		return {
			...packType,
			totalPossiblePacks,
			openedPacks,
			remainingPacks,
		};
	})
);

const {
	baseRarity: { frameUrl, rarityId },
} = await getSiteConfig();
---

<Page
	title={season.seasonName}
	class="flex flex-col gap-4"
	breadcrumbs={[
		{ label: routeNames.SEASONS, href: routes.SEASONS },
		{ label: season.seasonName },
	]}>
	<header>
		<PageHeader>
			<PageHeading id="season-name">{season.seasonName}</PageHeading>
		</PageHeader>

		<p class="text-lg" id="season-description">{season.seasonDescription || ''}</p>
	</header>

	<section class="text-lg">
		<SubHeading>Stats:</SubHeading>
		<p class="ml-4"><b>Total cards in season:</b> {totalPossibleCards}</p>
		<p class="ml-4"><b>Cards distributed:</b> {ownedCards}</p>
		<p class="ml-4"><b>Card remaining to distribute:</b> {remainingCards}</p>

		<div class="ml-4 mt-4">
			<SubHeading heading="h3"><span class="text-xl">Pack Types:</span></SubHeading>
			<ul>
				{
					packTypesWithCardPools.map(async (packType) => (
						<li>
							<b>{packType.packTypeName}</b>: {packType.totalPossiblePacks} total
							{packType.totalPossiblePacks === 1 ? 'pack' : 'packs'},{' '}
							{packType.remainingPacks}
							{packType.remainingPacks === 1 ? 'pack' : 'packs'} remaining to be
							opened
						</li>
					))
				}
			</ul>
		</div>
	</section>

	<SubHeading>Designs:</SubHeading>
	<CardList
		cards={cardDesigns.map((card) => ({
			cardName: card.cardName,
			designId: card.designId,
			frameUrl,
			imgUrl: card.imgUrl,
			cardNumber: 0,
			rarityName: rarityId,
			cardDescription: card.cardDescription,
			totalOfType: 0,
		}))}
	/>

	<DeleteSeasonButton seasonId={season.seasonId} client:load />
</Page>
