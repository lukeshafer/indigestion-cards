---
import CardList from '@/components/CardList.astro';
import Page from '@/layouts/Page.astro';
import {
	getPackTypesBySeasonId,
	getSeasonAndDesignsBySeasonId,
} from '@lil-indigestion-cards/core/card';
import { api, routes } from '@/constants';

const id = Astro.params.seasonId;

if (!id) {
	return Astro.redirect(`${routes.SEASONS}?alert=Season ID is required`);
}

const {
	season: [season],
	cardDesigns,
	cardInstances,
} = await getSeasonAndDesignsBySeasonId(id);

if (!season) {
	return Astro.redirect(`${routes.SEASONS}?alert='${id}' does not exist`);
}

const totalPossibleCards = cardDesigns.reduce((acc, card) => {
	return (
		acc +
		(card.rarityDetails?.reduce((acc, rarity) => {
			return acc + rarity.count;
		}, 0) ?? 0)
	);
}, 0);

const ownedCards = cardInstances.length;
const remainingCards = totalPossibleCards - ownedCards;

const packTypes = await getPackTypesBySeasonId({ seasonId: id });
const packTypesWithCardPools = await Promise.all(
	packTypes.map(async (packType) => {
		const totalPossiblePacks = Math.floor(totalPossibleCards / packType.cardCount);
		const openedPacks = ownedCards / packType.cardCount;
		const remainingPacks = Math.floor(remainingCards / packType.cardCount);
		return {
			...packType,
			totalPossiblePacks,
			openedPacks,
			remainingPacks,
		};
	})
);

const breadcrumbs = [
	{ label: 'Home', href: '/' },
	{ label: 'Seasons', href: routes.SEASONS },
	{ label: season.seasonName, href: `${routes.SEASONS}/${id}` },
];
---

<Page title={season.seasonName} class="flex flex-col gap-4" breadcrumbs={breadcrumbs}>
	<header>
		<div class="page-header">
			<h1 class="page-heading" id="season-name">{season.seasonName}</h1>
			<button
				class="post-button"
				data-type="submit"
				hx-swap="outerHTML transition:false"
				hx-get={api.SEASON.START_EDIT}
				hx-vals={JSON.stringify(season)}>Edit</button
			>
		</div>
		<p class="text-lg" id="season-description">{season.seasonDescription || ''}</p>
	</header>

	<section class="text-lg">
		<h2 class="sub-heading">Stats:</h2>
		<p>Total cards in season: {totalPossibleCards}</p>
		<p>Cards distributed: {ownedCards}</p>
		<p>Card remaining to distribute: {remainingCards}</p>

		<h3 class="sub-heading text-xl mt-4">Pack Types:</h3>
		<ul>
			{
				packTypesWithCardPools.map(async (packType) => (
					<li>
						<b>{packType.packTypeName}</b>: {packType.totalPossiblePacks} total
						{packType.totalPossiblePacks === 1 ? 'pack' : 'packs'},{' '}
						{packType.remainingPacks}
						{packType.remainingPacks === 1 ? 'pack' : 'packs'} remaining to be opened
					</li>
				))
			}
		</ul>
	</section>

	<h2 class="sub-heading">Cards:</h2>
	<CardList cards={cardDesigns} />

	<button
		class="post-button z-10 w-max"
		hx-delete={api.SEASON.DELETE}
		hx-swap="none"
		hx-vals={JSON.stringify(season)}
		data-type="delete">Delete Season<form-indicator></form-indicator></button
	>
</Page>

<script>
	const form = document.getElementById('delete-season') as HTMLFormElement;

	form.addEventListener('submit', async (e) => {
		const confirmation = confirm('Are you sure you want to delete this season?');
		if (!confirmation) e.preventDefault();
	});
</script>
