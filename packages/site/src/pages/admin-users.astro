---
import Page from '@/layouts/Page.astro'
import { useAdmin } from '@/session'
import { getAllAdminUsers } from '@lil-indigestion-cards/core/user'
import { routes } from '@/constants'
import SortTable from '@/components/SortTable.astro'

const admin = useAdmin(Astro.cookies)
if (!admin) return Astro.redirect(`/404`)

const users = await getAllAdminUsers()
---

<Page title="Users" breadcrumbs={[{ label: 'Home', href: '/' }, { label: 'Users' }]} session={admin}>
	<SortTable>
		<header slot="header" class="flex justify-between flex-wrap mb-4">
			<h1 class="page-heading">Admin Users</h1>
			<a
				href={routes.ADMIN.CREATE.ADMIN}
				class="text-xl bg-brand-tertiary p-3 pt-4 px-4 text-center w-max font-display lowercase italic shine text-shadow text-white">
				Add Admin
			</a>
		</header>
		<thead>
			<tr>
				<th>Username</th>
			</tr>
		</thead>
		<tbody>
			{
				users.map(({ username }) => (
					<tr>
						<td>{username}</td>
					</tr>
				))
			}
		</tbody>
	</SortTable>
</Page>

<style>
	user-table {
		max-width: 60rem;
		display: block;
	}

	table {
		table-layout: fixed;
		width: 100%;
		max-width: 60rem;
		text-align: center;
	}

	th {
		cursor: pointer;
	}

	tbody td {
		font-weight: 500;
		padding: 1.5rem;
		position: relative;
	}

	tbody td span {
		position: relative;
	}

	tbody td [astro-icon] {
		width: 3rem;
		color: white;
		position: absolute;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
	}

	tbody tr:nth-child(even) [astro-icon] {
		color: lightgray;
	}

	tbody tr:nth-child(even) {
		@apply bg-gray-50;
	}

	tbody tr:nth-child(odd) {
		@apply bg-gray-200;
	}

	th[data-mode='ascending']::after {
		content: '▲';
	}

	th[data-mode='descending']::after {
		content: '▼';
	}
</style>

<script>
	class UserTable extends HTMLElement {
		constructor() {
			super()
		}

		connectedCallback() {
			const headings = Array.from(this.querySelectorAll('th'))
			const body = this.querySelector('tbody')!
			const rows = Array.from(body.querySelectorAll('tr'))
			const originalRows = rows.slice()
			headings.forEach((th, index) => {
				th.addEventListener('click', () => {
					const currentMode = th.dataset.mode || 'none'
					const newMode =
						currentMode === 'none'
							? 'ascending'
							: currentMode === 'ascending'
							? 'descending'
							: 'none'

					th.dataset.mode = newMode
					if (newMode === 'none') {
						originalRows.forEach((row) => {
							body.appendChild(row)
						})
						return
					}

					const isAscending = newMode === 'ascending'
					const sortedRows = rows.sort((a, b) => {
						const aVal = a.children[index]!.textContent!
						const bVal = b.children[index]!.textContent!
						if (aVal < bVal) {
							return isAscending ? -1 : 1
						}
						if (aVal > bVal) {
							return isAscending ? 1 : -1
						}
						return 0
					})
					sortedRows.forEach((row) => {
						body.appendChild(row)
					})
				})
			})
		}
	}

	customElements.define('user-table', UserTable)
</script>
