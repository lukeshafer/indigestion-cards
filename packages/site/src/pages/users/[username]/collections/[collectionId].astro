---
import { getUserByLogin } from '@core/lib/twitch';
import { getUserByUserName } from '@core/lib/user';
import type { User } from '@core/types';
import { routeNames, routes } from '@site/constants';
import Page from '@site/layouts/Page.astro';
import { CollectionPage } from '@site/layouts/CollectionPage';
import { getCollectionCards } from '@core/lib/collections';

const { username, collectionId } = Astro.params;

if (!username || !collectionId) {
	return Astro.redirect(`${routes.USERS}?alert=Username is required`);
}

const twitchDataPromise = getUserByLogin(username)
	.catch(() => null)
	.then(data => data ?? null);

const userPromise: Promise<User> = getUserByUserName(username).then(
	user =>
		user ?? {
			username,
			cardCount: 0,
			packCount: 0,
			userId: '',
		}
);

const [twitchData, user] = await Promise.all([twitchDataPromise, userPromise]);

const collection = user.collections?.find(c => c.collectionId === collectionId);

if (!collection) {
	return Astro.redirect(`${routes.USERS}/${username}?alert=Collection not found.&type=error`);
}

const cards = await getCollectionCards({ userId: user.userId, collectionId: collection.collectionId });

if (!cards.success) {
	return Astro.redirect(`${routes.USERS}/${username}?alert=Collection not found.&type=error`);
}
---

<Page
	title=`[username]'s Collections`
	pageType="public"
	breadcrumbs={[
		{ label: routeNames.USER, href: routes.USERS },
		{ label: user.username, href: `${routes.USERS}/${username}` },
		{ label: collection.collectionName },
	]}>
	<CollectionPage
		user={user}
		twitchData={twitchData}
		isLoggedInUser={Astro.locals.user?.properties.userId === user.userId}
		cards={cards.data}
		collection={collection}
		client:load
	/>
</Page>
