---
import Page from '@/layouts/Page.astro';
import { getAllPackTypes } from '@lil-indigestion-cards/core/card';
import { getTwitchEvents } from '@lil-indigestion-cards/core/site-config';
import { TWITCH_GIFT_SUB_ID } from '@lil-indigestion-cards/core/constants';
import { Api } from 'sst/node/api';
import { AUTH_TOKEN } from '@/constants';
import { customReward } from '@lil-indigestion-cards/core/twitch-event-schemas';
import { z } from 'astro/zod';
import TableSearch from '@/components/TableSearch.astro';

const [twitchEvents, packTypes] = await Promise.all([getTwitchEvents(), getAllPackTypes()]);

const channelPointResponse = await fetch(`${Api.api.url}/get-all-channel-point-rewards`, {
	headers: {
		Authorization: `Bearer ${Astro.cookies.get(AUTH_TOKEN).value || ''}`,
	},
});

const body = await channelPointResponse.json();
const parseResult = z.array(customReward).safeParse(body);

if (!parseResult.success) {
	throw new Error(parseResult.error.message);
}

const giftSubEvent = twitchEvents.data.find((event) => event.eventId === TWITCH_GIFT_SUB_ID);
const giftSubPackType =
	giftSubEvent?.packTypeId && giftSubEvent?.packTypeName
		? {
				packTypeId: giftSubEvent?.packTypeId || '',
				packTypeName: giftSubEvent?.packTypeName || '',
		  }
		: undefined;

const rawRewards = parseResult.data;

const rewards = rawRewards
	.map((reward) => {
		const dbEvent = twitchEvents.data.find((event) => event.eventId === reward.id);

		return {
			...reward,
			packType: JSON.stringify(
				dbEvent?.packTypeId && dbEvent?.packTypeName
					? {
							packTypeId: dbEvent?.packTypeId || '',
							packTypeName: dbEvent?.packTypeName || '',
					  }
					: undefined
			),
		};
	})
	.filter((reward) => reward.is_enabled)
	.sort((a, b) => {
		if (a.packType && !b.packType) return -1;
		if (!a.packType && b.packType) return 1;
		if (a.title.toLowerCase() < b.title.toLowerCase()) return -1;
		if (a.title.toLowerCase() > b.title.toLowerCase()) return 1;
		return 0;
	});
---

<Page breadcrumbs={[{ label: 'Home', href: '/' }, { label: 'Config' }]} title="Site Config">
	<h1 class="page-heading">Site Config</h1>
	<section>
		<sort-table>
			<header class="page-header">
				<h2 class="sub-heading">Twitch Event Rewards</h2>
				<button class="post-button" data-type="submit" data-save hidden>Save</button>
				<TableSearch
					id="rewards-search"
					tableId="rewards-table"
					label="Search Rewards"
					searchColumn="Event"
				/>
			</header>
			<table class="mt-4" id="rewards-table">
				<thead>
					<tr>
						<th class="w-2/3">Event</th>
						<th>Pack Type</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>5 Gift Subs</td>
						<td>
							<select
								data-pack-type-select
								data-id={TWITCH_GIFT_SUB_ID}
								data-title={'5 Gift Subs'}
								data-cost="5"
								data-value={giftSubPackType ? JSON.stringify(giftSubPackType) : ''}
								class="my-form-input">
								<option value="">None</option>
								{
									packTypes.map(({ packTypeId, packTypeName }) => (
										<option
											value={JSON.stringify({
												packTypeId,
												packTypeName,
											})}>
											{packTypeName}
										</option>
									))
								}
							</select>
						</td>
					</tr>
					{
						rewards.map((reward) => (
							<tr>
								<td>{reward.title}</td>
								<td>
									<select
										data-pack-type-select
										data-id={reward.id}
										data-title={reward.title}
										data-cost={reward.cost}
										data-value={reward.packType}
										class="my-form-input">
										<option value="">None</option>
										{packTypes.map(({ packTypeId, packTypeName }) => (
											<option
												value={JSON.stringify({
													packTypeId,
													packTypeName,
												})}>
												{packTypeName}
											</option>
										))}
									</select>
								</td>
							</tr>
						))
					}
				</tbody>
			</table>
		</sort-table>
	</section>
</Page>

<script>
	const saveButton = document.querySelector('[data-save]') as HTMLButtonElement;
	const packTypeSelects = document.querySelectorAll<HTMLSelectElement>('[data-pack-type-select]');

	interface PackType {
		packTypeId: string;
		packTypeName: string;
		twitchEventId: string;
		twitchEventName: string;
		cost?: number | undefined;
	}

	packTypeSelects.forEach((select) => {
		if (select.dataset.value) select.value = select.dataset.value;
		select.addEventListener('change', () => {
			const eventId = select.dataset.id!;
			const eventName = select.dataset.title!;
			const cost = parseInt(select.dataset.cost!) || undefined;

			try {
				const packType = JSON.parse(select.value) as PackType;
				stateUpdates.channelPointRewards.set(select.dataset.id!, {
					...packType,
					twitchEventId: eventId,
					twitchEventName: eventName,
					cost,
				});
			} catch {
				stateUpdates.channelPointRewards.set(select.dataset.id!, {
					packTypeId: '',
					packTypeName: '',
					twitchEventId: eventId,
					twitchEventName: eventName,
					cost,
				});
			}
		});
	});

	const stateUpdates = {
		channelPointRewards: {
			set(rewardId: string, packType: PackType) {
				this.__state.set(rewardId, packType);
				stateUpdates.update();
			},
			__state: new Map<string, PackType>(),
		},
		update() {
			if (this.channelPointRewards.__state.size > 0) {
				saveButton.hidden = false;
			}
		},
		get state() {
			return {
				channelPointRewards: [...this.channelPointRewards.__state.values()],
			};
		},
	};

	saveButton.addEventListener('click', async () => {
		saveButton.innerText = 'Saving...';
		saveButton.disabled = true;

		const response = await fetch('/api/admin/save-config?fetch=true', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
			},
			body: JSON.stringify(stateUpdates.state),
		});

		if (response.ok) {
			saveButton.innerText = 'Saved!';
			saveButton.dataset.type = 'success';
			setTimeout(() => {
				saveButton.innerText = 'Save';
				saveButton.dataset.type = 'submit';
				saveButton.disabled = false;
			}, 1000);
		} else {
			saveButton.innerText = 'Error!';
			saveButton.dataset.type = 'error';
			setTimeout(() => {
				saveButton.innerText = 'Save';
				saveButton.dataset.type = 'submit';
				saveButton.disabled = false;
			}, 1000);
		}
	});
</script>
