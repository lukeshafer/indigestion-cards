---
import Page from '@/layouts/Page.astro';
import { useAdmin } from '@/session';
import { getAllPacks } from '@lil-indigestion-cards/core/card';
import TradingCard from '@/components/TradingCard.astro';
import { api } from '@/constants';

const user = useAdmin(Astro.cookies);

if (!user) {
	return Astro.redirect('/404');
}

const allPacks = await getAllPacks();
const packs = allPacks.filter((pack) => pack.userId && pack.username);
---

<Page
	title="Open Packs"
	class="open-pack-page"
	session={user}
	breadcrumbs={[{ label: 'Home', href: '/' }, { label: 'Open Packs' }]}>
	<h1 class="page-heading">Open Packs</h1>
	<section class="my-8 bg-[#dde] p-3" id="pack-list">
		<h2 class="font-semibold text-xl">Unopened packs:</h2>
		<ul class="packs">
			{
				packs.map((pack) => (
					<li data-pack-info={JSON.stringify(pack)} id={pack.packId}>
						<div data-pack-main class="pack-main">
							<button class="text-shadow shine">
								<h3>{pack.username}</h3>
							</button>
						</div>
						<div data-pack-placeholder class="pack-drag-placeholder" />
					</li>
				))
			}
		</ul>
	</section>
	<open-showcase data-open-url={api.OPEN_CARD}>
		<h2>Now opening for <span class="username"></span></h2>
		<ul class="cards"></ul>
	</open-showcase>
</Page>
<template id="reveal-card-template">
	<p class="error-text" hidden></p>
	<button data-card="back" title="Click to reveal"></button>
	<div data-card="front">
		<TradingCard>
			<img data-art />
		</TradingCard>
	</div>
</template>

<style>
	:global(.open-pack-page) {
		display: grid;
		grid-template-columns: auto 1fr;
		grid-auto-rows: auto;
	}

	#pack-list {
		grid-column: 1;
	}

	#pack-list ul {
		overflow-y: scroll;
		display: flex;
		flex-direction: column;
		gap: 1.5rem;
		position: relative;

		scrollbar-width: auto;
		padding-bottom: 0.5rem;
		min-height: 20rem;
		--scrollbar-color: var(--color-main);
		--scrollbar-track-color: #dde;
		scrollbar-color: var(--scrollbar-color) var(--scrollbar-track-color);
	}

	#pack-list .pack-main {
		display: flex;
		justify-content: center;
		gap: 0.5rem;
		width: 15rem;
		background: var(--color-main);
		padding: 0.5rem;
	}

	.pack-drag-placeholder {
		display: none;
		border: 0.2rem dashed black;
		padding: 0.5rem;
		height: 3rem;
		width: 100%;
	}

	#pack-list li[hidden] {
		display: none;
	}

	#pack-list li button {
		background: var(--color-main);
		font-family: var(--font-display);
		font-style: italic;
		color: white;
		font-size: 1.3rem;

		width: 100%;
		margin: 0 auto;
		text-align: center;
	}

	#pack-list ul::-webkit-scrollbar {
		width: 1rem;
	}

	#pack-list ul::-webkit-scrollbar-track {
		background: var(--scrollbar-track-color);
	}

	#pack-list ul::-webkit-scrollbar-thumb {
		background-color: var(--scrollbar-color);
		border: 3px solid var(--scrollbar-track-color);
		cursor: pointer;
	}

	#pack-list ul::-webkit-scrollbar:hover {
		filter: brightness(1.5);
	}

	#pack-list li button h3 {
		padding: 0.4rem 0.6rem 0.3rem;
		width: 100%;
		text-align: center;
		background: var(--color-main-dark);
	}

	open-showcase ul {
		display: flex;
		gap: 3rem;
		flex-wrap: wrap;
		justify-content: center;
		align-items: center;
	}

	open-showcase h2 {
		display: none;
		text-align: center;
		font-size: 2rem;
		font-weight: 600;
	}

	open-showcase h2 .username {
		font-family: var(--font-display);
		font-style: italic;
		display: block;
	}
</style>

<style is:global>
	reveal-card {
		position: relative;
		transform-style: preserve-3d;
		transform-origin: center;
		transition: transform 0.5s;
		width: 10rem;
		height: 14rem;
		display: block;
	}

	reveal-card[flipped] {
		transform: rotateY(-180deg);
	}

	reveal-card [data-art] {
		width: 10rem;
		height: 14rem;
	}

	reveal-card [data-card] {
		position: absolute;
		inset: 0;
		width: 100%;
		height: 100%;
		backface-visibility: hidden;
	}

	reveal-card [data-card='back'] {
		background: var(--color-main);
		border: 0.2rem solid var(--color-main-dark);
		cursor: pointer;
	}

	reveal-card [data-card='front'] {
		transform: rotateY(180deg);
	}

	li.dragging [data-pack-main] {
		opacity: 0.5;
		position: absolute;
		z-index: 100;
		top: 0;
		transform: translateY(var(--mouse-y));
	}

	li.dragging [data-pack-placeholder] {
		display: block;
	}
</style>

<script>
	import type { getAllPacks } from '@lil-indigestion-cards/core/card';
	type PackInfo = Awaited<ReturnType<typeof getAllPacks>>[number];
	type Pack = {
		element: HTMLLIElement;
		info: PackInfo;
	};
	type Card = NonNullable<PackInfo['cardDetails']>[number];

	const packList = document.querySelector<HTMLUListElement>('#pack-list ul')!;
	const packEls = document.querySelectorAll<HTMLLIElement>('#pack-list li');
	const showcase = document.querySelector('open-showcase') as OpenShowcase;
	const openCardUrl = showcase.dataset.openUrl as string;

	const packs = new Map<string, Pack>();
	let mouseUp = () => {};
	let currentDraggedPack: HTMLLIElement | null = null;

	for (const pack of packEls) {
		const packInfo = JSON.parse(pack.dataset.packInfo!) as PackInfo;

		let pressed = false;
		let dragging = false;
		let dragTimeout: number;
		const button = pack.querySelector('button')!;

		button.addEventListener('mousedown', (e) => {
			pressed = true;
			dragTimeout = window.setTimeout(() => {
				e.preventDefault();
				startDrag();
			}, 200);
		});
		button.addEventListener('click', () => {
			if (dragging) {
				return;
			}
			showcase.currentPack = packs.get(packInfo.packId)!;
		});

		function startDrag() {
			if (!pressed) return;
			currentDraggedPack = pack;
			dragging = true;
			mouseUp = () => {
				if (!pressed) return;
				currentDraggedPack = null;
				pressed = false;
				dragging = false;
				pack.classList.remove('dragging');
			};
			pack.classList.add('dragging');
		}

		packs.set(packInfo.packId, {
			element: pack,
			info: packInfo,
		});
	}

	document.addEventListener('mouseup', () => {
		mouseUp();
	});

	window.addEventListener('mousemove', (e) => {
		const packListTop = packList.getBoundingClientRect().top;
		const y = e.clientY - packListTop;
		document.documentElement.style.setProperty('--mouse-y', `${y - 30}px`);

		if (!currentDraggedPack) return;

		packEls.forEach((pack) => {
			if (pack === currentDraggedPack || !currentDraggedPack) return;
			const rect = pack.getBoundingClientRect();
			if (e.clientY > rect.top && e.clientY < rect.bottom) {
				packList.insertBefore(currentDraggedPack, pack);
			}
		});
	});

	class OpenShowcase extends HTMLElement {
		#currentPack: Pack | null = null;
		list: HTMLUListElement | null = null;
		h2: HTMLHeadingElement | null = null;
		username: HTMLSpanElement | null = null;
		constructor() {
			super();
		}

		connectedCallback() {
			this.list = this.querySelector('ul')!;
			this.h2 = this.querySelector('h2')!;
			this.username = this.querySelector('.username')!;
		}

		set currentPack(pack: Pack | null) {
			if (this.#currentPack) {
				this.#currentPack.element.hidden = false;
			}
			this.#currentPack = pack;
			this.username!.innerText = pack ? pack.info.username ?? '' : '';
			this.list!.innerHTML = '';
			if (!pack) {
				this.h2!.style.display = 'none';
				return;
			}
			this.h2!.style.display = 'block';

			pack.element.hidden = true;
			pack.info.cardDetails.forEach((card) => {
				const li = document.createElement('li');
				const cardData = JSON.stringify(card);
				li.innerHTML = `
					<reveal-card 
						packId=${pack.info.packId}
						cardData='${cardData}'>
					</reveal-card>`;
				this.list!.appendChild(li);
			});
		}

		get currentPack() {
			return this.#currentPack;
		}
	}

	const revealCardTemplate = document.getElementById(
		'reveal-card-template'
	) as HTMLTemplateElement;

	class RevealCard extends HTMLElement {
		#cardData: Card | null = null;
		#cardBack: HTMLButtonElement | null = null;
		#cardFront: HTMLDivElement | null = null;
		packId = '';
		constructor() {
			super();
		}

		set cardData(card: Card | null) {
			this.#cardData = card;
			if (card?.opened) {
				this.setAttribute('flipped', '');
			}
			if (!this.#cardData || !this.#cardBack || !this.#cardFront) return;
			this.#cardFront.querySelector<HTMLImageElement>('[data-art]')!.src =
				this.#cardData.imgUrl;
		}

		get cardData() {
			return this.#cardData;
		}

		connectedCallback() {
			const template = revealCardTemplate.content.cloneNode(true) as DocumentFragment;
			this.appendChild(template);
			this.packId = this.getAttribute('packId') as string;
			this.#cardBack = this.querySelector('[data-card="back"]') as HTMLButtonElement;
			this.#cardFront = this.querySelector('[data-card="front"]') as HTMLDivElement;

			this.cardData = JSON.parse(this.getAttribute('cardData')!) as Card;

			const tradingCard = this.querySelector<HTMLElement>('trading-card');
			if (tradingCard) tradingCard.dataset.border = this.cardData.rarityName.toLowerCase();

			this.#cardBack.addEventListener('click', () => {
				this.setAttribute('flipped', '');
			});
		}

		static get observedAttributes() {
			return ['flipped'];
		}

		attributeChangedCallback(name: string, oldValue: string, newValue: string) {
			if (name === 'flipped' && oldValue !== newValue) {
				const pack = packs.get(this.packId);
				if (!pack) {
					console.error('Pack not found');
					return;
				}

				const index = pack.info.cardDetails.findIndex(
					(card) => card.instanceId === this.#cardData!.instanceId
				);

				if (pack.info.cardDetails[index]!.opened) {
					return;
				}
				pack.info.cardDetails[index]!.opened = true;

				if (pack.info.cardDetails.every((card) => card.opened)) {
					pack.element.remove();
					packs.delete(pack.info.packId);
				} else {
					packs.set(pack.info.packId, pack);
				}
				fetch(openCardUrl, {
					method: 'POST',
					body: JSON.stringify({
						instanceId: this.#cardData!.instanceId,
						designId: this.#cardData!.designId,
					}),
				}).then((res) => {
					if (res.ok) return;
					const errorText = this.querySelector<HTMLParagraphElement>('p.error-text')!;
					errorText.hidden = false;
					errorText.textContent = res.statusText;
				});
			}
		}
	}

	customElements.define('open-showcase', OpenShowcase);
	customElements.define('reveal-card', RevealCard);
</script>
