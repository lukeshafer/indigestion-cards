---
import { z } from 'astro/zod';
import { TWITCH_GIFT_SUB_ID } from '@lil-indigestion-cards/core/constants';
import { updateBatchTwitchEvents, updateSiteConfig } from '@lil-indigestion-cards/core/site-config';

if (Astro.request.method !== 'POST') return new Response('Method not allowed', { status: 405 });

const params = new URLSearchParams(await Astro.request.text());

const rarity = new URLSearchParams(params.get('base-rarity') || '');
const rarityId = rarity.get('rarityId');
if (!rarityId) return new Response('Missing rarityId', { status: 400 });
const frameUrl = rarity.get('frameUrl');
if (!frameUrl) return new Response('Missing frameUrl', { status: 400 });

const rarityObject = {
	rarityId,
	frameUrl,
};

const eventValueSchema = z.object({
	packTypeId: z.string().optional(),
	packTypeName: z.string().optional(),
});

type Event = Parameters<typeof updateBatchTwitchEvents>[0][number];
const events: Event[] = [];
params.forEach((value, key) => {
	if (key.startsWith('event-type-')) {
		const eventId = key.replace('event-type-', '');
		const { packTypeId, packTypeName } = parseEventValue(value);
		const event = {
			eventId,
			eventType:
				eventId === TWITCH_GIFT_SUB_ID
					? 'channel.subscription.gift'
					: 'channel.channel_points_custom_reward_redemption.add',
			packTypeId,
			packTypeName,
		} satisfies Event;
		events.push(event);
	}
});

const siteConfig = updateSiteConfig({ baseRarity: rarityObject });
const batchTwitchEvents = updateBatchTwitchEvents(events);

await Promise.all([siteConfig, batchTwitchEvents]);

function parseEventValue(value: any): {
	packTypeId: string | undefined;
	packTypeName: string | undefined;
} {
	if (!value)
		return {
			packTypeId: undefined,
			packTypeName: undefined,
		};

	try {
		const parsed = eventValueSchema.parse(JSON.parse(value));
		return {
			packTypeId: parsed.packTypeId,
			packTypeName: parsed.packTypeName,
		};
	} catch {
		return {
			packTypeId: undefined,
			packTypeName: undefined,
		};
	}
}
---

<body>
	<button
		id="save-config-btn"
		@htmx:load="setTimeout(() => { $el.innerText = 'Save'; $el.dataset.type = 'submit'; isEdited = false }, 1000)"
		class="post-button h-max w-24"
		data-type="success"
		x-show="isEdited"
		hx-swap-oob="true">
		Saved
	</button>
</body>
