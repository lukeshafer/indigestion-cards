---
import Alert from '@/components/Alert.astro';
import {
	createPackForNoUser,
	givePackToUser,
	packSchema,
	packSchemaWithoutUser,
} from '@lil-indigestion-cards/core/pack';
import { getUserByLogin } from '@lil-indigestion-cards/core/twitch-helpers';

if (Astro.request.method.toUpperCase() !== 'POST') {
	return new Response('Method not allowed', { status: 405 });
}

const body = await Astro.request.text();
const formData = new URLSearchParams(body);

const username = formData.get('username');
const rawCount = formData.get('count');
const paramUserId = formData.get('userId');
const packTypeString = formData.get('packType');

if (!packTypeString) {
	return new Response('Missing pack type', { status: 400 });
}
const userId = username ? paramUserId ?? (await getUserByLogin(username))?.id ?? null : null;

const count = Number(rawCount) || 1;
let success = false;
let errorStr = '';

try {
	const packTypeUnparsed = JSON.parse(packTypeString);

	if (!username || !userId) {
		const packDetails = packSchemaWithoutUser.parse({
			packCount: count,
			packType: packTypeUnparsed,
		});
		await createPackForNoUser(packDetails);
	} else {
		const packDetails = packSchema.parse({
			userId,
			username,
			packCount: count,
			packType: packTypeUnparsed,
		});
		await givePackToUser(packDetails);
	}
	Astro.response.headers.set('HX-Trigger', `{ "refreshCount": "true" }`);
	success = true;
} catch (error) {
	if (error instanceof Error) {
		console.error(error.message);
		errorStr = error.message;
	} else {
		console.error('Unknown error', error);
		errorStr = 'An unknown error occurred';
	}
}
---

<body>
	{
		success ? (
			<Alert type="success">
				{username ? (
					<>
						Pack created for <strong>{username}!</strong>
					</>
				) : (
					`Pack created!`
				)}
			</Alert>
		) : (
			<Alert type="error">{errorStr}</Alert>
		)
	}
</body>
