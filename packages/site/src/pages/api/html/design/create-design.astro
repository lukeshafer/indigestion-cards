---
import Alert from '@/components/Alert.astro';
import { routes } from '@/constants';
import Redirect from '@/lib/redirect';
import {
	createCardDesign,
	deleteUnmatchedDesignImage,
	getAllRarities,
} from '@lil-indigestion-cards/core/card';

if (Astro.request.method.toUpperCase() !== 'POST') {
	return new Response('Method not allowed', { status: 405 });
}

const params = new URLSearchParams(await Astro.request.text());

const season = params.get('season');
const imgUrl = params.get('imgUrl');
const imageKey = params.get('imageKey');
const cardName = params.get('cardName');
const designId = params.get('designId');
const cardDescription = params.get('cardDescription');
const artist = params.get('artist');

async function createDesign() {
	const errors = [];
	if (!imgUrl) errors.push('Image URL is required');
	if (!imageKey) errors.push('Image key is required');
	if (!season) errors.push('Season is required');
	if (!cardName) errors.push('Card name is required');
	if (!cardDescription) errors.push('Card description is required');
	if (!artist) errors.push('Artist is required');
	if (!designId) errors.push('Design ID is required');

	if (errors.length) {
		return {
			success: false,
			error: errors.join(', '),
		};
	}

	const rarities = await getAllRarities();

	const rarityDetails = rarities.map(({ rarityId, rarityName, frameUrl }) => {
		const count = params.get(`rarity-${rarityId}-count`);
		return {
			rarityId,
			rarityName,
			frameUrl,
			count: count ? parseInt(count) : 0,
		};
	});

	const { seasonId, seasonName } = JSON.parse(season!);

	const result = await createCardDesign({
		seasonId: seasonId!,
		seasonName: seasonName!,
		cardName: cardName!,
		cardDescription: cardDescription!,
		artist: artist!,
		designId: designId!,
		imgUrl: imgUrl!,
		rarityDetails,
	});

	if (result.success) {
		await deleteUnmatchedDesignImage({ imageId: imageKey!, type: 'cardDesign' });
		return { success: true };
	}

	return {
		success: false,
		error: result.error,
	};
}

const result = await createDesign();
---

<body>
	{
		result.success ? (
			<Redirect to={routes.DESIGNS} alert="Design created!" type="success" {Astro} />
		) : (
			<Alert type="error">{result.error}</Alert>
		)
	}
</body>
