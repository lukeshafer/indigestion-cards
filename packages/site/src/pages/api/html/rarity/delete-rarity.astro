---
import Redirect from '@/lib/redirect';
import Alert from '@/components/Alert.astro';
import { AUTH_TOKEN } from '@/constants';
import { Api } from 'sst/node/api';
import { deleteRarityById } from '@lil-indigestion-cards/core/card';

if (Astro.request.method.toUpperCase() !== 'DELETE') {
	return new Response('Method not allowed', { status: 405 });
}

const body = await Astro.request.text();
const params = new URLSearchParams(body);

const rarityId = params.get('rarityId');
const frameUrl = params.get('frameUrl');
const rarityName = params.get('rarityName');
async function deleteRarity() {
	if (!rarityId) {
		return { success: false, error: 'Missing rarity id' };
	}
	if (!frameUrl) {
		return { success: false, error: 'Missing frame url' };
	}

	const deleteFrameUrl = `${Api.api.url}/delete-rarity-frame`;
	const deleteFrameResult = await fetch(deleteFrameUrl, {
		method: 'DELETE',
		body: JSON.stringify({ frameUrl }),
		headers: {
			authorization: `Bearer ${Astro.cookies.get(AUTH_TOKEN).value ?? ''}`,
		},
	});
	if (!deleteFrameResult.ok) {
		console.error(deleteFrameResult);
		return { success: false, error: 'Failed to delete frame' };
	}

	const result = await deleteRarityById(rarityId);
	if (!result || !result.success) {
		return { success: false, error: result.error || 'Failed to delete rarity' };
	}

	return { success: true };
}

const result = await deleteRarity();
---

<body>
	{
		result.success ? (
			<Redirect
				to="/rarity"
				alert={`Successfully deleted rarity ${rarityName || rarityId || ''}`}
				type="success"
				{Astro}
			/>
		) : (
			<Alert type="error">{result.error}</Alert>
		)
	}
</body>
