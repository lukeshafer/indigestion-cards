---
import Alert from '@/components/Alert.astro';
import Redirect from '@/lib/redirect';
import { createRarity, deleteUnmatchedDesignImage } from '@lil-indigestion-cards/core/card';

if (Astro.request.method !== 'POST') {
	return new Response('Error: Method not allowed', { status: 405 });
}

const params = new URLSearchParams(await Astro.request.text());

const rarityId = params.get('rarityId');
const rarityName = params.get('rarityName');
const defaultCount = parseInt(params.get('defaultCount') || '0') || 0;
const imgUrl = params.get('imgUrl');
const imageKey = params.get('imageKey');
const bucket = params.get('bucket');

let errorMessage = '';
if (!imgUrl) errorMessage += 'Missing imgUrl. ';
if (!imageKey) errorMessage += 'Missing imageKey. ';
if (!rarityName) errorMessage += 'Missing rarityName. ';
if (!rarityId) errorMessage += 'Missing rarityId. ';
if (defaultCount < 1) errorMessage += 'Default count must be greater than 0. ';
if (!bucket) errorMessage += 'Missing bucket. ';
if (!rarityId!.match(/^[a-z0-9-]+$/))
	errorMessage += 'Invalid seasonId. (Must be lowercase, numbers, and dashes only) ';

if (errorMessage.length === 0) {
	const deleteUnmatchedImagePromise = deleteUnmatchedDesignImage({
		imageId: imageKey!,
		type: 'frame',
	});
	const createPromise = createRarity({
		rarityId: rarityId!,
		rarityName: rarityName!,
		frameUrl: imgUrl!,
		defaultCount,
	});

	const [result] = await Promise.all([createPromise, deleteUnmatchedImagePromise]);
	if (!result.success) {
		errorMessage = result.error;
	}
}
---

<body>
	{
		errorMessage ? (
			<Alert type="error">{errorMessage}</Alert>
		) : (
			<Redirect to="/rarity" alert="Rarity created!" type="success" {Astro} />
		)
	}
</body>
