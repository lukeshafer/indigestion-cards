---
import type { RarityRankingRecord } from '@lil-indigestion-cards/core/lib/site-config';
import type { CardType, SortType } from '@/lib/client/utils';
import { sortTypes } from '@/lib/client/utils';
import { Select } from '../form/Form';
import { Show } from 'solid-js';
import CardListItem from './CardListItem.astro';
import { mapStream } from '@/lib/stream';

interface Props {
	cards: CardType[] | ReadableStream<CardType[]>;
	showUsernames?: boolean;
	noSort?: boolean;
	sortOnlyBy?: SortType[];
	pathType: 'user' | 'card';
	rarityRanking?: RarityRankingRecord;
}

const { cards, showUsernames = false, noSort, sortOnlyBy, pathType, rarityRanking } = Astro.props;

const allowedSortTypes = sortOnlyBy?.length
	? sortTypes.filter(type => sortOnlyBy?.includes(type.value))
	: sortTypes.slice();
---

<div class="flex flex-col gap-3">
	<Show when={!noSort}>
		<div class="ml-auto flex w-fit">
			<Select name="sort" label="Sort by" options={allowedSortTypes} />
		</div>
	</Show>
	<ul
		class="grid w-full justify-center justify-items-center gap-x-2 gap-y-14 px-3 [--card-scale:0.75] sm:[--card-scale:1] md:gap-x-6"
		style={{
			'grid-template-columns':
				'repeat(auto-fill, minmax(calc(var(--card-scale) * 18rem), 1fr))',
		}}>
		{
			cards instanceof ReadableStream ? (
				mapStream(cards, cardArray =>
					cardArray.map(card => <CardListItem {card} {pathType} {showUsernames} />)
				)
			) : !(cards instanceof ReadableStream) && cards.length > 0 ? (
				cards.map(card => <CardListItem {card} {pathType} {showUsernames} />)
			) : (
				<p>No cards found</p>
			)
		}
	</ul>
</div>
