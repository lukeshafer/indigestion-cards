---
import type { RarityRankingRecord } from '@lil-indigestion-cards/core/lib/site-config';
import type { CardType, SortType } from '@/lib/client/utils';
import { sortTypes } from '@/lib/client/utils';
import { Select } from '../form/Form';
import { Show } from 'solid-js';
import CardListItem from './CardListItem.astro';
import { mapStream } from '@/lib/stream';

interface Props {
	cards: CardType[] | ReadableStream<CardType[]>;
	showUsernames?: boolean;
	noSort?: boolean;
	sortOnlyBy?: SortType[];
	pathType: 'user' | 'card';
	rarityRanking?: RarityRankingRecord;
}

const { cards, showUsernames = false, noSort, sortOnlyBy, pathType, rarityRanking } = Astro.props;

const allowedSortTypes = sortOnlyBy?.length
	? sortTypes.filter(type => sortOnlyBy?.includes(type.value))
	: sortTypes.slice();
---

<card-list
	class="flex flex-col gap-3"
	no-sort={noSort}
	rarity-ranking={JSON.stringify(rarityRanking)}>
	<Show when={!noSort}>
		<div class="ml-auto flex w-fit">
			<Select name="sort" label="Sort by" options={allowedSortTypes} />
		</div>
	</Show>
	<ul
		class="grid w-full justify-center justify-items-center gap-x-2 gap-y-14 px-3 [--card-scale:0.75] sm:[--card-scale:1] md:gap-x-6"
		style={{
			'grid-template-columns':
				'repeat(auto-fill, minmax(calc(var(--card-scale) * 18rem), 1fr))',
		}}>
		{
			cards instanceof ReadableStream ? (
				mapStream(cards, cardArray =>
					cardArray.map(card => <CardListItem {card} {pathType} {showUsernames} />)
				)
			) : !(cards instanceof ReadableStream) && cards.length > 0 ? (
				cards.map(card => <CardListItem {card} {pathType} {showUsernames} />)
			) : (
				<p>No cards found</p>
			)
		}
	</ul>
</card-list>

<script>
	import { createSignal, createEffect, createRoot } from 'solid-js';
	import {
		sortCards,
		cardListItemSchema,
		type CardListItem,
		useViewTransition,
	} from '@/lib/client/utils';
	import type { RarityRankingRecord } from '@lil-indigestion-cards/core/lib/site-config';

	function parseCards<El extends HTMLElement>(elements: NodeListOf<El>) {
		return [...elements.values()].reduce<Map<string, { el: El; card: CardListItem }>>(
			(acc, el) => {
				const result = cardListItemSchema.safeParse(JSON.parse(el.dataset.card || '{}'));
				if (result.success) {
					return acc.set(result.data.instanceId || result.data.designId, {
						el,
						card: result.data,
					});
				} else return acc;
			},
			new Map()
		);
	}

	customElements.define(
		'card-list',
		class CardList extends HTMLElement {
			connectedCallback() {
				createRoot(() => {
					if (this.getAttribute('no-sort') !== null) return;

					const rarityRanking = JSON.parse(
						this.getAttribute('rarity-ranking')!
					) as RarityRankingRecord;

					const select = this.querySelector('select');
					if (!select) return;

					const cardList = this.querySelector('ul');
					if (!cardList) return;

					const [sortMode, setSortMode] = createSignal(select.value);
					select.onchange = () => {
						console.log('change');
						setSortMode(select.value);
					};

					const cardsElementMap = parseCards(cardList.querySelectorAll('li'));
					const cardsDataList = Array.from(cardsElementMap.values()).map(
						value => value.card
					);

					const sortedCards = () =>
						sortCards({ cards: cardsDataList, sort: sortMode(), rarityRanking });

					createEffect(() => {
						console.log('effect');
						sortedCards().forEach(card => {
							const data = cardsElementMap.get(card.instanceId || card.designId);
							if (!data) return;
							console.log('appending');
							useViewTransition(() => {
								cardList.appendChild(data.el);
							});
						});
					});
				});
			}
		}
	);
</script>
