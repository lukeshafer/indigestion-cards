---
import { getAllPacks } from '@lib/pack';
import { routes } from '@/constants';
import TotalPackCount from '@/components/pack/TotalPackCount';

export interface Props {
	class?: string;
}

const currentPage = Astro.url.pathname;
const adminLinks = [
	{ href: routes.ADMIN_USERS, title: 'Admins' },
	{ href: routes.CARDS, title: 'Cards' },
	{ href: routes.PACK_TYPES, title: 'Pack Types' },
	{ href: routes.PACKS, title: 'Packs' },
	{ href: routes.PREORDERS, title: 'Preorders' },
	{ href: routes.RARITIES, title: 'Rarities' },
	{ href: routes.SEASONS, title: 'Seasons' },
	{ href: routes.ADMIN.SITE_CONFIG, title: 'Site Config' },
	{ href: routes.USERS, title: 'Users' },
] satisfies { href: string; title: string }[];

const packs = await getAllPacks();

const actionLinks = [
	{ href: routes.ADMIN.OPEN_PACKS, title: 'Open Packs', id: 'open-packs', count: packs.length },
	{ href: routes.ADMIN.GIVE_PACK, title: 'Give Pack', id: 'give-pack' },
];
---

<admin-panel
	class="absolute bottom-0 top-0 z-[1] overflow-y-scroll transition-transform duration-300 ease-in-out md:relative md:z-0 md:transition-none">
	<nav class="flex min-h-[100svh] max-w-[14rem] flex-col gap-8 pb-4 pt-28 text-white md:py-10 bg-brand-main dark:bg-brand-dark">
		<div class="my-10 flex flex-1 flex-col items-center gap-8 self-center px-12">
			{
				actionLinks.map((actionLink) => (
					<a
						preload="mouseover"
						href={actionLink.href}
						title={actionLink.title}
						class="bg-brand-dark/50 dark:bg-gray-950/20 font-heading shine text-shadow relative block rounded-2xl 
							px-2 py-1 text-center text-3xl font-extrabold 
							uppercase transition-transform hover:scale-105">
						{actionLink.count ? (
							<TotalPackCount count={actionLink.count} client:load />
						) : null}
						{actionLink.title}
					</a>
				))
			}
		</div>
		<div class="pb">
			<h2 class="font-heading text-brand-dark dark:text-brand-light my-3 p-1 px-6 text-lg font-medium">
				Administration
			</h2>
			{
				adminLinks.map(({ href, title }) =>
					currentPage === href || currentPage.startsWith(href) ? (
						<a
							preload="mouseover"
							preload-images="true"
							href={href}
							title={title}
							style={{ 'view-transition-name': 'active-admin-panel-link' }}
							class="font-heading block bg-white px-6 py-1 font-medium text-black">
							{title}
						</a>
					) : (
						<a
							preload="mouseover"
							preload-images="true"
							href={href}
							title={title}
							class="font-heading text-shadow block px-6 py-1 font-medium hover:bg-gray-900/20">
							{title}
						</a>
					)
				)
			}
		</div>
	</nav>
</admin-panel>

<style>
	admin-panel::-webkit-scrollbar {
		display: none;
	}

	@media (max-width: 768px) {
		admin-panel {
			--isClosed: 1;
			transform: translateX(calc(var(--isClosed) * -100%));
		}
	}
</style>

<script>
	class AdminPanel extends HTMLElement {
		isClosed = true;
		constructor() {
			super();
		}

		connectedCallback() {
			const hamburgerButton = document.querySelector(
				'[data-for-admin-panel] button'
			) as HTMLButtonElement;
			const nav = this.querySelector('nav') as HTMLDivElement;
			hamburgerButton.addEventListener('click', () => {
				this.isClosed = !this.isClosed;
				this.style.setProperty('--isClosed', `${+this.isClosed}`);
				hamburgerButton.setAttribute('aria-pressed', `${!this.isClosed}`);
				nav.setAttribute('aria-expanded', `${this.isClosed}`);
			});
		}
	}

	if (!customElements.get('admin-panel')) customElements.define('admin-panel', AdminPanel);
</script>
