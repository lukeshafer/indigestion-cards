---
import type { Trade } from '@lil-indigestion-cards/core/db/trades';
import type { User } from '@lil-indigestion-cards/core/db/users';
import SortTable from '../table/SortTable.astro';
import SortTableCell from '../table/SortTableCell.astro';
import SortTableRow from '../table/SortTableRow.astro';
import SortTableBody from '../table/SortTableBody.astro';
import SortTableHead from '../table/SortTableHead.astro';
import SortTableColumn from '../table/SortTableColumn.astro';
import { routes } from '@/constants';
import { Anchor } from '../text';

interface Props {
	incomingTrades: Array<Trade>;
	outgoingTrades: Array<Trade>;
	userTradeNotifications: User['tradeNotifications'];
}

const { incomingTrades, outgoingTrades, userTradeNotifications } = Astro.props;

const trades = [...incomingTrades, ...outgoingTrades].sort(
	(a, b) => (a.createdAt || 0) - (b.createdAt || 0)
);

const notifications = userTradeNotifications?.reduce((acc, notif) => {
	const tradenotif = acc.get(notif.tradeId);
	if (!tradenotif) return acc.set(notif.tradeId, notif);
	if (notif.status === 'statusUpdated') return acc.set(notif.tradeId, notif);
	return acc;
}, new Map<string, NonNullable<User['tradeNotifications']>[number]>());

const isLoggedInUsername = (name: string) =>
	name.toUpperCase() === Astro.locals.user?.properties.username.toUpperCase();
---

<SortTable>
	<SortTableHead>
		<SortTableColumn name="dateCreated" startDescending>Date</SortTableColumn>
		<SortTableColumn name="with" hideOnBreakpoint="sm">With</SortTableColumn>
		<SortTableColumn name="to" startDescending showOnBreakpoint="sm">To</SortTableColumn>
		<SortTableColumn name="from" startDescending showOnBreakpoint="sm">From</SortTableColumn>
		<SortTableColumn name="tradeType" startDescending showOnBreakpoint="sm" width="15%">
			Type
		</SortTableColumn>
		<SortTableColumn name="status" startDescending showOnBreakpoint="sm">
			Status
		</SortTableColumn>
		<SortTableColumn name="actions" startDescending no-sort />
	</SortTableHead>
	<SortTableBody>
		{
			trades.map((trade) => (
				<SortTableRow highlighted={notifications?.has(trade.tradeId)}>
					<SortTableCell column="dateCreated" value={trade.createdAt || 0}>
						{trade.createdAt ? (
							<time datetime={new Date(trade.createdAt).toISOString()}>
								{new Date(trade.createdAt).toLocaleDateString()}
							</time>
						) : null}
					</SortTableCell>
					<SortTableCell
						column="with"
						font="title"
						hideOnBreakpoint="sm"
						value={
							isLoggedInUsername(trade.senderUsername)
								? trade.receiverUsername
								: trade.senderUsername
						}>
						<a
							href={`${routes.USERS}/${trade.receiverUsername}`}
							class="hover:underline focus:underline">
							{trade.receiverUsername}
						</a>
					</SortTableCell>
					<SortTableCell
						showOnBreakpoint="sm"
						column="from"
						font="title"
						value={trade.senderUsername}>
						<a
							href={`${routes.USERS}/${trade.senderUsername}`}
							class="hover:underline focus:underline">
							{trade.senderUsername}
						</a>
					</SortTableCell>
					<SortTableCell
						showOnBreakpoint="sm"
						column="to"
						font="title"
						value={trade.receiverUsername}>
						<a
							href={`${routes.USERS}/${trade.receiverUsername}`}
							class="hover:underline focus:underline">
							{trade.receiverUsername}
						</a>
					</SortTableCell>
					<SortTableCell
						showOnBreakpoint="sm"
						column="tradeType"
						value={isLoggedInUsername(trade.senderUsername) ? 'Outgoing' : 'Incoming'}
					/>
					<SortTableCell
						showOnBreakpoint="sm"
						column="status"
						value={
							notifications?.get(trade.tradeId)?.status === 'newMessage'
								? 'New Message'
								: (notifications?.get(trade.tradeId)?.status === 'statusUpdated'
										? 'New Status: '
										: '') +
								  trade.status.charAt(0).toUpperCase() +
								  trade.status.slice(1)
						}
					/>
					<SortTableCell column="actions" value="">
						<Anchor href={`/trades/${trade.tradeId}`}>View</Anchor>
					</SortTableCell>
				</SortTableRow>
			))
		}
	</SortTableBody>
</SortTable>
