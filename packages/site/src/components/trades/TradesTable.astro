---
import type { Trade } from '@lil-indigestion-cards/core/db/trades';
import type { User } from '@lil-indigestion-cards/core/db/users';
import SortTable from '../table/SortTable.astro';
import SortTableCell from '../table/SortTableCell.astro';
import SortTableRow from '../table/SortTableRow.astro';
import SortTableBody from '../table/SortTableBody.astro';
import SortTableHead from '../table/SortTableHead.astro';
import SortTableColumn from '../table/SortTableColumn.astro';
import { routes } from '@/constants';
import { Anchor } from '../text';
import { Icon } from 'astro-icon/components';

interface Props {
	trades: Array<Trade>;
	notifications: Map<string, NonNullable<User['tradeNotifications']>[number]>;
}

const { trades, notifications } = Astro.props;

const sortedTrades = trades
	.slice()
	.sort((a, b) =>
		notifications.has(a.tradeId)
			? -1
			: notifications.has(b.tradeId)
				? 1
				: (b.createdAt || 0) - (a.createdAt || 0)
	);

const isLoggedInUserId = (id: string) =>
	id.toUpperCase() === Astro.locals.user?.properties.userId.toUpperCase();

function getTradeStatus(trade: Trade) {
	if (notifications.get(trade.tradeId)?.status === 'newMessage') return 'New Message';

	const prefix =
		notifications.get(trade.tradeId)?.status === 'statusUpdated' ? 'New Status: ' : '';

	if (trade.status === 'pending' && isLoggedInUserId(trade.senderUserId))
		return prefix + `Waiting on ${trade.receiverUsername}`;
	else if (trade.status === 'pending' && isLoggedInUserId(trade.receiverUserId))
		return prefix + `Awaiting your response`;

	return prefix + trade.status.charAt(0).toUpperCase() + trade.status.slice(1);
}
---

<SortTable>
	<SortTableHead>
		<SortTableColumn name="tradeType" startDescending width="4rem" />
		<SortTableColumn name="dateCreated" startDescending width="6rem" showOnBreakpoint="sm">
			Date
		</SortTableColumn>
		<SortTableColumn name="from" startDescending>From</SortTableColumn>
		<SortTableColumn name="to" startDescending>To</SortTableColumn>
		<SortTableColumn name="status" startDescending showOnBreakpoint="sm">
			Status
		</SortTableColumn>
		<SortTableColumn name="actions" startDescending no-sort width="7rem" />
	</SortTableHead>
	<SortTableBody>
		{
			sortedTrades.map(trade => (
				<SortTableRow highlighted={notifications.has(trade.tradeId)}>
					<SortTableCell
						column="tradeType"
						value={isLoggedInUserId(trade.senderUserId) ? 'Outgoing' : 'Incoming'}>
						{isLoggedInUserId(trade.senderUserId) ? (
							<Icon
								name="mdi:export"
								title="Out"
								class="mx-auto max-w-8 text-gray-700 dark:text-gray-100"
								size={30}
							/>
						) : (
							<Icon
								name="mdi:import"
								title="In"
								class="mx-auto max-w-8 text-gray-700 dark:text-gray-100"
								size={30}
							/>
						)}
					</SortTableCell>
					<SortTableCell
						column="dateCreated"
						value={trade.createdAt || 0}
						showOnBreakpoint="sm">
						{trade.createdAt ? (
							<time datetime={new Date(trade.createdAt).toISOString()}>
								{new Date(trade.createdAt).toLocaleDateString()}
							</time>
						) : null}
					</SortTableCell>
					<SortTableCell column="from" font="title" value={trade.senderUsername}>
						<a
							href={`${routes.USERS}/${trade.senderUsername}`}
							class="hover:underline focus:underline">
							{trade.senderUsername}
						</a>
					</SortTableCell>
					<SortTableCell column="to" font="title" value={trade.receiverUsername}>
						<a
							href={`${routes.USERS}/${trade.receiverUsername}`}
							class="hover:underline focus:underline">
							{trade.receiverUsername}
						</a>
					</SortTableCell>
					<SortTableCell
						showOnBreakpoint="sm"
						column="status"
						value={getTradeStatus(trade)}
					/>
					<SortTableCell column="actions" value="">
						<Anchor href={`/trades/${trade.tradeId}`}>View</Anchor>
					</SortTableCell>
				</SortTableRow>
			))
		}
	</SortTableBody>
</SortTable>
