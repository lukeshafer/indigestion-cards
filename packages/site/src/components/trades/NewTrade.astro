---
import type { CardInstance } from '@lil-indigestion-cards/core/db/cardInstances';
import type { RarityRankingRecord } from '@lil-indigestion-cards/core/lib/site-config';
import { Heading } from '../text';

interface Props {
	userId: string;
	username: string;
	cardInstances: CardInstance[];
	initialOfferedCards?: CardInstance[];
	initialRequestedCards?: CardInstance[];
	initialReceiverUsername?: string;
	initialReceiverCards?: CardInstance[];
	rarityRanking?: RarityRankingRecord;
}

const props = Astro.props;
---

<script>
	import { defineElement } from 'solid-enhancement';
	import { createEffect } from 'solid-js';

	defineElement('new-trade', ({ root, $ }) => {
		const form = $('#new-trade-form', HTMLFormElement);

		createEffect(() => {
		});
	});
</script>

<new-trade>
	<form class="sr-only" id="reset-form"></form>
	<form
		id="new-trade-form"
		method="post"
		class="mx-auto max-w-7xl"
		enctype="application/x-www-form-urlencoded">
		<section class="w-full">
			<Heading classList={{ 'text-center': true }}>Offer</Heading>
			<input type="hidden" name="senderUsername" value={props.username} />
			<div class="flex h-12 items-end justify-center text-center text-xl font-semibold">
				{props.username}
			</div>
			<!--  
			<OfferWindow
				cards={state.offeredCards}
				setCards={setter => setState('offeredCards', setter)}
			/>
      -->
			<!--  
			<CardSearchList
				type="offer"
				label="Your Cards"
				cards={yourCards()}
				setCards={setter => setState('offeredCards', setter)}
				rarityRanking={props.rarityRanking}
			/>
      -->
		</section>
		<section class="w-full">
			<Heading classList={{ 'text-center': true }}>Request</Heading>
			<div class="flex h-12 items-end justify-center text-center text-xl font-semibold">
				{
					state.receiverUsername === null ? (
						<div>
							<TextInput
								inputOnly
								name="receiverUsername"
								label="Search for User"
								onInvalid={e =>
									e.currentTarget.setCustomValidity('Please select a user')
								}
								required
								list="usernames"
								onChange={e => {
									if (
										users()?.includes(e.target.value) &&
										e.target.value !== props.username
									)
										setState('receiverUsername', e.target.value);
								}}
							/>
							<button
								type="submit"
								class="sr-only"
								formMethod="get"
								onClick={e => {
									e.preventDefault();
									const input = e.target.previousSibling as HTMLInputElement;
									if (
										users()?.includes(input.value) &&
										input.value !== props.username
									)
										setState('receiverUsername', input.value);
								}}>
								Submit
							</button>
						</div>
					) : (
						<>
							<input
								type="hidden"
								name="receiverUsername"
								value={state.receiverUsername}
							/>
							{state.receiverUsername}
							<button
								class="px-4 text-red-500"
								type="submit"
								form="reset-form"
								onClick={() => {
									setState('receiverUsername', null);
								}}>
								X
							</button>
						</>
					)
				}
			</div>
			<OfferWindow
				cards={state.requestedCards}
				setCards={setter => setState('requestedCards', setter)}
			/>
			<Show when={state.receiverUsername !== null}>
				<Suspense
					fallback={(
						<div class="relative">
							<Loading />
						</div>
					)}>
					<CardSearchList
						type="request"
						label={`${state.receiverUsername}'s cards`}
						cards={receiverCardsUi() ?? []}
						setCards={setter => setState('requestedCards', setter)}
					/>
				</Suspense>
			</Show>
		</section>
		<div
			class="col-span-full grid grid-cols-[minmax(auto,30rem)] flex-col justify-center justify-items-start gap-2">
			<TextArea
				name="message"
				maxLength="140"
				label="Message"
				placeholder="Write a message to the other user"
			/>
			<SubmitButton />
		</div>
	</form>
</new-trade>
