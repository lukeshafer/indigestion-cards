---
import { publicApi } from '@/constants';
import Form from './form/Form.astro';
---

<user-search data-api-route={publicApi.GET_ALL_USERNAMES}>
	<Form method="get" action={publicApi.SEARCH} loadingText="Searching" autocomplete="off">
		<label class="visually-hidden" for="username">Search Twitch Username</label>
		<input
			class="input"
			name="username"
			data-user-search
			type="text"
			placeholder="Search Users"
			required
		/>
		<ul
			data-results
			class="brand-shadow no-text-shadow absolute top-full w-full bg-white text-black">
		</ul>
	</Form>
</user-search>

<style is:global>
	user-search li.selected a {
		background: #f0f0f0;
	}
</style>

<script>
	const anchorTemplate = document.createElement('template');
	//anchorTemplate.innerHTML = `

	class UserSearch extends HTMLElement {
		searchInput = this.querySelector('[data-user-search]') as HTMLInputElement;
		results = this.querySelector('[data-results]') as HTMLUListElement;
		users: string[] = [];
		#searchResults: string[] = [];
		isfetching = false;
		constructor() {
			super();
		}

		async fetchUsernames() {
			if (this.users.length > 0 || this.isfetching) return;
			this.isfetching = true;
			const response = await fetch(this.dataset.apiRoute!);
			const usernames = await response.json();
			if (!Array.isArray(usernames)) throw new Error('Invalid response from server');
			this.users = usernames;
			this.isfetching = false;
		}

		doSearch() {
			const search = this.searchInput.value.toLowerCase();
			if (!search) {
				this.searchResults = [];
				return;
			}

			const tempResults = [...this.searchResults];

			for (const username of this.users) {
				if (!username.toLowerCase().includes(search.toLowerCase())) {
					if (tempResults.includes(username)) {
						tempResults.splice(this.searchResults.indexOf(username), 1);
					}
					continue;
				}

				if (!tempResults.includes(username)) {
					tempResults.push(username);
				}
			}

			tempResults.sort((a, b) => {
				if (a === search) return -1;
				if (b === search) return 1;
				if (a.startsWith(search) && !b.startsWith(search)) return -1;
				if (!a.startsWith(search) && b.startsWith(search)) return 1;
				return 0;
			});

			this.searchResults = tempResults;
		}

		get searchResults(): string[] {
			return this.#searchResults;
		}

		set searchResults(value: string[]) {
			this.#searchResults = value;
			if (value.length === 0) {
				this.results.style.display = 'none';
				return;
			}
			this.results.style.display = 'block';
			this.results.innerHTML = '';
			for (const username of this.searchResults) {
				const result = document.createElement('li');
				result.innerHTML = `
					<a href="/user/${username}" class="p-2 block hover:bg-[#f0f0f0] focus:bg-[#f0f0f0]">${username}</a>`;
				this.results.appendChild(result);
			}
		}

		connectedCallback() {
			const searchInput = this.querySelector('[data-user-search]') as HTMLInputElement;
			const form = this.querySelector('form') as HTMLFormElement;
			this.results = this.querySelector('[data-results]') as HTMLUListElement;

			searchInput.addEventListener('mouseover', this.fetchUsernames.bind(this));
			searchInput.addEventListener('focus', this.fetchUsernames.bind(this));
			searchInput.addEventListener('click', this.fetchUsernames.bind(this));

			form.addEventListener('submit', (e) => {
				e.preventDefault();
			});
			searchInput.addEventListener('input', () => this.doSearch());
			searchInput.addEventListener('keydown', (e) => {
				if (e.key === 'Enter') {
					e.preventDefault();
					const selected = this.results.querySelector<HTMLLIElement>('.selected');
					if (selected) {
						const link = selected.querySelector<HTMLAnchorElement>('a');
						if (link) {
							link.click();
						}
					} else {
						const first = this.results.querySelector('li');
						if (first) {
							const link = first.querySelector<HTMLAnchorElement>('a');
							if (link) {
								link.click();
							}
						}
					}
				}

				if (e.key === 'Down' || e.key === 'ArrowDown') {
					e.preventDefault();
					const selected = this.results.querySelector<HTMLLIElement>('.selected');
					if (selected) {
						const next = selected.nextElementSibling as HTMLLIElement;
						if (next) {
							selected.classList.remove('selected');
							next.classList.add('selected');
						}
					} else {
						const first = this.results.querySelector('li');
						if (first) {
							first.classList.add('selected');
						}
					}
				}

				if (e.key === 'Up' || e.key === 'ArrowUp') {
					e.preventDefault();
					const selected = this.results.querySelector<HTMLLIElement>('.selected');
					if (selected) {
						const prev = selected.previousElementSibling as HTMLLIElement;
						if (prev) {
							selected.classList.remove('selected');
							prev.classList.add('selected');
						}
					} else {
						const last = this.results.querySelector('li:last-child');
						if (last) {
							last.classList.add('selected');
						}
					}
				}
			});
		}
	}

	customElements.define('user-search', UserSearch);
</script>
