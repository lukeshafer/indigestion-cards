---
interface Props {
	shiny?: boolean;
	border?: string;
}
---

<div
	class="outer"
	x-data={`{
			border: '${Astro.props.border}',
			transition: 'transform 0.5s',
			shinePosition: '50%',
			shineAfterOpacity: '0',
			transform: 'rotate3d(0, 0, 0, 0deg)',
			shineOpacity: '0',
		}`}
	@mouseenter="shineAfterOpacity = '1'; setTimeout(() => { transition = 'transform 0.0s' }, 100)"
	@mousemove="{ transform, shinePosition, shineOpacity } = handleCardHoverEvent($event, $el)"
	@mouseleave="shineAfterOpacity = '0'; transition = 'transform 0.5s'; transform = 'rotate3d(0, 0, 0, 0deg)'; shinePosition = '50%'; shineOpacity = '0.2';">
	<div
		class="inner"
		class:list={{ shiny: Astro.props.shiny ?? false }}
		:style={`\`
		--shine-position: \${shinePosition};
		--shine-opacity: \${shineOpacity};
		--border: \${border};
		--shine-after-opacity: \${shineAfterOpacity};
		transform: \${transform};
	\``}>
		<slot />
	</div>
</div>

<script is:inline>
	/**
	 * @param {MouseEvent | TouchEvent} e
	 * @param {HTMLElement} outer
	 */
	function handleCardHoverEvent(e, outer) {
		if (e.type === 'touchmove') e.preventDefault();

		const { clientX, clientY } = 'touches' in e ? e.touches[0] : e;
		const { left, top, width, height } = outer.getBoundingClientRect();

		const x = Math.min(Math.max((clientX - left) / width - 0.5, -0.5), 0.5);
		const y = Math.min(Math.max((clientY - top) / height - 0.5, -0.5), 0.5);
		const angle = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)) * 70;

		return {
			transform: `rotate3d(${y}, ${-x}, 0, ${angle}deg)`,
			shinePosition: `${60 - (-x + 0.5) * 60 + (40 - (-y + 0.5) * 40)}%`,
			shineOpacity: `${y + 0.2 + (x + 0.2)}`,
		};
	}
</script>

<style>
	.outer {
		width: max-content;
		position: relative;
		transform-style: preserve-3d;
		transition: transform 0.3s, scale 0.3s;
		perspective: 900px;
		z-index: 1;

		--shine-opacity: 0.2;
		--shine-position: 50%;
		--shine-after-opacity: 0;
	}

	.outer:hover {
		scale: 1.1;
		transform: translateZ(300px);
	}

	.inner::after,
	.inner::before {
		border-color: var(--border, transparent);
		border-width: 5px;
		border-style: solid;

		transform: translateZ(200px);
		position: absolute;
		inset: 0;
		width: 100%;
		height: 100%;
		display: block;
		z-index: 1;
		content: '';

		background-position: var(--shine-position) 0%;
		opacity: var(--shine-after-opacity);
		transition: opacity 0.5s;
		background-repeat: no-repeat;
	}

	.inner::after {
		--shine-level: clamp(0.05, calc(0.1 * var(--shine-opacity)), 1);
		background-size: 200% 200%;
		background-image: radial-gradient(
			ellipse at center,
			rgba(255, 255, 255, var(--shine-level)) 0%,
			#fff0 100%
		);
	}

	.inner.shiny::before {
		--adjusted: calc(var(--shine-opacity) - 0.5);
		--sq: calc(1 - 3 * var(--adjusted) * var(--adjusted));
		--shine-level: clamp(0.1, calc(0.6 * var(--sq)), 0.7);
		background-size: 300% 110%;
		background-image: linear-gradient(
			110deg,
			#fff0 0%,
			hsl(calc(var(--shine-opacity) * 360) 100% 95% / 25%) 20%,
			#fff3 30%,
			hsl(calc(var(--shine-opacity) * 360) 100% 95% / var(--shine-level)) 50%,
			rgb(255 255 255 / var(--shine-level)) 55%,
			hsl(calc(var(--shine-opacity) * 360 + 180) 100% 95% / var(--shine-level)) 65%,
			#fff3 100%
		);
	}
</style>
