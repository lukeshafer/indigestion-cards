---
import Form, { type FormProps } from './form/Form.astro'

interface Props {
	/** ID of the table to search. Must be to a <table> element. */
	tableId: string
	/** Label for the input. */
	label: string
	/** ID for the input. */
	id: string
	/** Action for internal form. Used if providing backup for no-JS environments. */
	action?: string | undefined
	/** Method for internal form. Defaults to `get`. */
	method?: string | undefined
	/** Attributes for the internal form. Optional. */
	form?: Omit<FormProps, 'action' | 'method' | 'slot'> | undefined
	/** Column heading. Defaults to first column if no value provided. */
	searchColumn?: string | undefined
}

const {
	method = 'get',
	action,
	tableId,
	label,
	id: inputId,
	form: formProps,
	searchColumn = '',
} = Astro.props
---

<table-search data-table-id={tableId} data-search-column={searchColumn}>
	<Form method={method} action={action} {...formProps}>
		<label for={inputId} class="visually-hidden">{label}</label>
		<input name="search" id={inputId} data-table-search type="text" placeholder={label} required />
	</Form>
</table-search>

<script>
	class TableSearch extends HTMLElement {
		constructor() {
			super()
		}

		connectedCallback() {
			const tableId = this.dataset.tableId
			if (!tableId) return
			const table = document.getElementById(tableId)
			if (!table || !(table instanceof HTMLTableElement)) return

			const searchColumn = this.dataset.searchColumn

			const body = table.querySelector('tbody')!
			const rows = Array.from(body.querySelectorAll('tr'))
			const originalRows = rows.slice()

			const searchColumnIndex = searchColumn
				? Array.from(table.querySelectorAll('th')).findIndex(
						(th) => th.textContent === searchColumn
				  ) || 0
				: 0

			const searchInput = this.querySelector('[data-table-search]') as HTMLInputElement
			const doSearch = () => {
				const search = searchInput.value.toLowerCase()
				if (!search) {
					originalRows.forEach((row) => {
						body.appendChild(row)
					})
					return
				}

				for (const row of rows) {
					const username = row.children[searchColumnIndex]?.textContent?.toLowerCase()
					if (!username) continue
					if (!username.includes(search)) {
						if (row.parentElement) row.parentElement.removeChild(row)
						continue
					}
					body.appendChild(row)
				}
			}

			searchInput.addEventListener('input', doSearch)
			searchInput.addEventListener('load', doSearch)
			searchInput.addEventListener('keydown', (e) => {
				if (e.key === 'Enter') {
					e.preventDefault()
					const currentRows = body.querySelectorAll('tr')
					if (currentRows.length === 1) {
						const username = currentRows.item(0).children[0]!.textContent!
						if (!username) return

						window.location.href = `/user/${username}`
					}
				}
			})
		}
	}

	customElements.define('table-search', TableSearch)
</script>
