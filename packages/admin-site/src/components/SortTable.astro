---
import type { HTMLAttributes } from 'astro/types'

type Props = HTMLAttributes<'table'>
---

<sort-table>
	<slot name="header" />
	<table {...Astro.props}>
		<slot />
	</table>
</sort-table>

<style is:global>
	sort-table {
		max-width: 60rem;
		display: block;
	}

	sort-table table {
		table-layout: fixed;
		text-align: center;
		width: 100%;
		max-width: 60rem;
	}

	sort-table th:not([data-no-sort]) {
		cursor: pointer;
	}

	sort-table tbody td {
		font-weight: 500;
		padding: 1.5rem;
		position: relative;
	}

	sort-table tbody td span {
		position: relative;
	}

	sort-table tbody td [astro-icon] {
		width: 3rem;
		color: white;
		position: absolute;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
	}

	sort-table tbody tr:nth-child(even) [astro-icon] {
		color: lightgray;
	}

	sort-table tbody tr:nth-child(even) {
		@apply bg-gray-50;
	}

	sort-table tbody tr:nth-child(odd) {
		@apply bg-gray-200;
	}

	sort-table th[data-mode='ascending']::after {
		content: '▲';
	}

	sort-table th[data-mode='descending']::after {
		content: '▼';
	}
</style>

<script>
	class SortTable extends HTMLElement {
		constructor() {
			super()
		}

		connectedCallback() {
			const headings = Array.from(this.querySelectorAll('th'))
			const body = this.querySelector('tbody')!
			const rows = Array.from(body.querySelectorAll('tr'))
			const originalRows = rows.slice()
			let currentHeading: HTMLTableCellElement | null = null
			headings.forEach((th, index) => {
				if (th.dataset.noSort === '') return
				th.addEventListener('click', () => {
					if (currentHeading && currentHeading !== th) {
						currentHeading.dataset.mode = 'none'
					}
					currentHeading = th
					const currentMode = th.dataset.mode || 'none'
					const newMode =
						currentMode === 'none'
							? 'ascending'
							: currentMode === 'ascending'
							? 'descending'
							: 'none'

					th.dataset.mode = newMode
					if (newMode === 'none') {
						originalRows.forEach((row) => {
							body.appendChild(row)
						})
						return
					}

					const dataType = th.dataset.type || 'string'
					const isAscending = newMode === 'ascending'
					const sortedRows = rows.sort((a, b) => {
						const aVal = a.children[index]!.textContent!
						const bVal = b.children[index]!.textContent!
						if (dataType === 'number') {
							return isAscending ? Number(aVal) - Number(bVal) : Number(bVal) - Number(aVal)
						}
						if (aVal < bVal) {
							return isAscending ? -1 : 1
						}
						if (aVal > bVal) {
							return isAscending ? 1 : -1
						}
						return 0
					})
					sortedRows.forEach((row) => {
						body.appendChild(row)
					})
				})
			})
		}
	}

	customElements.define('sort-table', SortTable)
</script>
