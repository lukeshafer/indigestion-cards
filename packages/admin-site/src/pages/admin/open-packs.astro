---
import Page from '@/layouts/Page.astro'
import { useUser } from '@/session'
import { getAllPacks } from '@lil-indigestion-cards/core/card'
import TradingCard from '@/components/TradingCard.astro'
import { api } from '@/constants'

const user = useUser(Astro.cookies)

if (!user) {
	return Astro.redirect('/404')
}

const packs = await getAllPacks()
---

<Page
	title="Open Packs"
	session={user}
	breadcrumbs={[{ label: 'Home', href: '/' }, { label: 'Open Packs' }]}>
	<h1 class="page-heading">Open Packs</h1>
	<section class="my-8 bg-[#dde] p-3" id="pack-list">
		<h2 class="font-semibold text-xl">Unopened packs:</h2>
		<ul class="flex gap-6 overflow-x-scroll packs">
			{
				packs.map((pack) => (
					<li data-pack-info={JSON.stringify(pack)}>
						<button class="bg-brand-main font-display italic text-shadow text-white text-lg">
							<h3>{pack.username}</h3>
						</button>
					</li>
				))
			}
		</ul>
	</section>
	<open-showcase data-open-url={api.OPEN_CARD}>
		<ul class="cards"></ul>
	</open-showcase>
</Page>
<template id="reveal-card-template">
	<p class="error-text" hidden></p>
	<button data-card="back" title="Click to reveal"></button>
	<div data-card="front">
		<TradingCard>
			<img data-art />
		</TradingCard>
	</div>
</template>

<style>
	#pack-list ul {
		scrollbar-width: auto;
		padding-bottom: 0.5rem;
		height: 10rem;
		--scrollbar-color: var(--color-main);
		--scrollbar-track-color: #dde;
		scrollbar-color: var(--scrollbar-color) var(--scrollbar-track-color);
	}

	#pack-list ul::-webkit-scrollbar {
		width: 1rem;
	}

	#pack-list ul::-webkit-scrollbar-track {
		background: var(--scrollbar-track-color);
	}

	#pack-list ul::-webkit-scrollbar-thumb {
		background-color: var(--scrollbar-color);
		border: 3px solid var(--scrollbar-track-color);
		cursor: pointer;
	}

	#pack-list ul::-webkit-scrollbar:hover {
		filter: brightness(1.5);
	}

	li button {
		height: 10rem;
		display: grid;
		grid-template-columns: 14rem;
		place-items: center;
	}

	li button h3 {
		padding: 0.4rem 0.6rem 0.3rem;
		width: max-content;
		background: var(--color-main-dark);
	}

	open-showcase ul {
		display: flex;
		gap: 3rem;
		flex-wrap: wrap;
		justify-content: center;
		align-items: center;
	}
</style>

<style is:global>
	reveal-card {
		position: relative;
		transform-style: preserve-3d;
		transform-origin: center;
		transition: transform 0.5s;
		width: 10rem;
		height: 14rem;
		display: block;
	}

	reveal-card[flipped] {
		transform: rotateY(-180deg);
	}

	reveal-card [data-art] {
		width: 10rem;
		height: 14rem;
	}

	reveal-card [data-card] {
		position: absolute;
		inset: 0;
		width: 100%;
		height: 100%;
		backface-visibility: hidden;
	}

	reveal-card [data-card='back'] {
		background: var(--color-main);
		border: 0.2rem solid var(--color-main-dark);
		cursor: pointer;
	}

	reveal-card [data-card='front'] {
		transform: rotateY(180deg);
	}
</style>

<script>
	import type { getAllPacks } from '@lil-indigestion-cards/core/card'
	type PackInfo = Awaited<ReturnType<typeof getAllPacks>>[number]
	type Pack = {
		element: HTMLLIElement
		info: PackInfo
	}
	type Card = NonNullable<PackInfo['cardDetails']>[number]

	const packEls = document.querySelectorAll<HTMLLIElement>('#pack-list li')
	const showcase = document.querySelector('open-showcase') as OpenShowcase
	const openCardUrl = showcase.dataset.openUrl as string

	const packs = new Map<string, Pack>()
	for (const pack of packEls) {
		const packInfo = JSON.parse(pack.dataset.packInfo!) as PackInfo
		pack.querySelector('button')!.addEventListener('click', () => {
			showcase.currentPack = packs.get(packInfo.packId)!
		})

		packs.set(packInfo.packId, {
			element: pack,
			info: packInfo,
		})
	}

	class OpenShowcase extends HTMLElement {
		#currentPack: Pack | null = null
		list: HTMLUListElement | null = null
		constructor() {
			super()
		}

		connectedCallback() {
			this.list = this.querySelector('ul')!
		}

		set currentPack(pack: Pack | null) {
			if (this.#currentPack) {
				this.#currentPack.element.hidden = false
			}
			this.#currentPack = pack
			this.list!.innerHTML = ''
			if (!pack) return

			pack.element.hidden = true
			pack.info.cardDetails.forEach((card) => {
				const li = document.createElement('li')
				const cardData = JSON.stringify(card)
				li.innerHTML = `
					<reveal-card 
						packId=${pack.info.packId}
						cardData=${cardData}>
					</reveal-card>`
				this.list!.appendChild(li)
			})
		}

		get currentPack() {
			return this.#currentPack
		}
	}

	const revealCardTemplate = document.getElementById('reveal-card-template') as HTMLTemplateElement

	class RevealCard extends HTMLElement {
		#cardData: Card | null = null
		#cardBack: HTMLButtonElement | null = null
		#cardFront: HTMLDivElement | null = null
		packId = ''
		constructor() {
			super()
		}

		set cardData(card: Card | null) {
			this.#cardData = card
			if (card?.opened) {
				this.setAttribute('flipped', '')
			}
			if (!this.#cardData || !this.#cardBack || !this.#cardFront) return
			this.#cardFront.querySelector<HTMLImageElement>('[data-art]')!.src = this.#cardData.imgUrl
		}

		get cardData() {
			return this.#cardData
		}

		connectedCallback() {
			const template = revealCardTemplate.content.cloneNode(true) as DocumentFragment
			this.appendChild(template)
			this.packId = this.getAttribute('packId') as string
			this.#cardBack = this.querySelector('[data-card="back"]') as HTMLButtonElement
			this.#cardFront = this.querySelector('[data-card="front"]') as HTMLDivElement

			this.cardData = JSON.parse(this.getAttribute('cardData')!) as Card
			this.#cardBack.addEventListener('click', () => {
				this.setAttribute('flipped', '')
			})
		}

		static get observedAttributes() {
			return ['flipped']
		}

		attributeChangedCallback(name: string, oldValue: string, newValue: string) {
			if (name === 'flipped' && oldValue !== newValue) {
				const pack = packs.get(this.packId)
				if (!pack) {
					console.error('Pack not found')
					return
				}

				const index = pack.info.cardDetails.findIndex(
					(card) => card.instanceId === this.#cardData!.instanceId
				)

				if (pack.info.cardDetails[index]!.opened) {
					console.error('Card already opened')
					return
				}
				pack.info.cardDetails[index]!.opened = true

				if (pack.info.cardDetails.every((card) => card.opened)) {
					pack.element.remove()
					packs.delete(pack.info.packId)
				} else {
					packs.set(pack.info.packId, pack)
				}
				fetch(openCardUrl, {
					method: 'POST',
					body: JSON.stringify({
						instanceId: this.#cardData!.instanceId,
					}),
				}).then((res) => {
					if (res.ok) return
					const errorText = this.querySelector<HTMLParagraphElement>('p.error-text')!
					errorText.hidden = false
					errorText.textContent = res.statusText
				})
			}
		}
	}

	customElements.define('open-showcase', OpenShowcase)
	customElements.define('reveal-card', RevealCard)
</script>
