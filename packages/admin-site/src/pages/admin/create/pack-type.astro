---
import { useUser } from '@/session'
import Page from '@/layouts/Page.astro'
import Form from '@/components/form/Form.astro'
import { api } from '@/constants'
import { getAllSeasons, getAllCardDesigns } from '@lil-indigestion-cards/core/card'

const user = useUser(Astro.cookies)
if (user?.type !== 'user') {
	return Astro.redirect('/404')
}

const seasons = await getAllSeasons()
const cardDesigns = await getAllCardDesigns()
---

<Page
	session={user}
	title="Create Pack Type"
	breadcrumbs={[{ label: 'Home', href: '/' }, { label: 'Create Pack Type' }]}>
	<h1 class="page-heading">Create New Pack Type</h1>
	<Form method="post" action={`${api.CREATE_PACK_TYPE}`} id="new-pack-type-form">
		<div class="input-group">
			<label for="packTypeName">Name</label>
			<input id="packTypeName" name="packTypeName" type="text" required />
		</div>
		<div class="input-group">
			<label for="packTypeId">Pack Type ID</label>
			<input
				id="packTypeId"
				name="packTypeId"
				type="text"
				readonly
				required
				data-edit-button
				data-id-from="packTypeName"
				pattern="[a-z0-9-]+"
			/>
		</div>
		<div class="input-group">
			<label for="description">Description</label>
			<input id="description" name="description" type="text" />
		</div>
		<div class="input-group">
			<label for="cardCountPerPack">Number of cards per pack</label>
			<input id="cardCountPerPack" name="cardCountPerPack" type="number" required value="5" />
		</div>
		<div class="input-group">
			<label for="category">Card pool</label>
			<select id="category" name="category" required>
				<option value="season">Season</option>
				<option value="custom">Custom</option>
			</select>
		</div>
		<div class="input-group season-input-group">
			<label for="season" class="required">Season</label>
			<select id="season" name="season">
				<option value="">--</option>
				{
					seasons.map((season) => (
						<option
							value={JSON.stringify({ seasonId: season.seasonId, seasonName: season.seasonName })}>
							{season.seasonName}
						</option>
					))
				}
			</select>
		</div>
		<fieldset class="card-input-group" hidden>
			<input name="cardDesigns" type="hidden" value="[]" />
			<legend>Cards</legend>
			{
				cardDesigns.map((cardDesign) => (
					<div>
						<input
							id={cardDesign.designId}
							name={cardDesign.designId}
							type="checkbox"
							value={cardDesign.designId}
							title={cardDesign.cardName}
							data-src={cardDesign.imgUrl}
						/>
						<label class="checkbox-label" for={cardDesign.designId}>
							{cardDesign.cardName}
						</label>
					</div>
				))
			}
			<div>
				<input id="cardDesignTest" name="cardDesigns" type="checkbox" value="test" title="test" />
				<label class="checkbox-label" for="cardDesignTest"> test</label>
			</div>
		</fieldset>
		<button type="submit">Save</button>
	</Form>
</Page>

<script>
	const form = document.getElementById('new-pack-type-form') as HTMLFormElement
	const category = form.querySelector('#category') as HTMLSelectElement
	const season = form.querySelector('.season-input-group') as HTMLDivElement
	const cardDesignList = form.querySelector('.card-input-group') as HTMLFieldSetElement
	const cardDesignsInput = cardDesignList.querySelector(
		'input[name="cardDesigns"]'
	) as HTMLInputElement
	category.addEventListener('change', handleCategoryChange)
	handleCategoryChange()

	function handleCategoryChange() {
		switch (category.value) {
			case 'season':
				cardDesignList.style.display = 'none'
				cardDesignList.hidden = true
				season.hidden = false
				season.style.removeProperty('display')
				season.setAttribute('required', '')
				break
			case 'custom':
				season.style.display = 'none'
				season.hidden = true
				cardDesignList.hidden = false
				cardDesignList.style.removeProperty('display')
				cardDesignList.removeAttribute('required')
				break
		}
	}

	form.addEventListener('submit', (e) => {
		if (category.value !== 'custom') return
		const selectedDesigns = cardDesignList.querySelector('input:checked') as HTMLInputElement
		if (!selectedDesigns) {
			alert('You must select at least one card design')
			e.preventDefault()
		}
	})

	cardDesignList.querySelectorAll('input[type="checkbox"]').forEach((checkbox) => {
		checkbox.addEventListener('change', () => {
			const selectedDesigns = cardDesignList.querySelectorAll(
				'input:checked'
			) as NodeListOf<HTMLInputElement>
			const selectedDesignIds = Array.from(selectedDesigns).map((design) => ({
				designId: design.value,
				cardName: design.title,
				imgUrl: design.dataset.src,
			}))
			cardDesignsInput.value = JSON.stringify(selectedDesignIds)
		})
	})
</script>
