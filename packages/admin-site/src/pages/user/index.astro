---
import Page from '@/layouts/Page.astro'
import { Icon } from 'astro-icon'
import { useUser } from '@/session'
import { getAllUsers } from '@lil-indigestion-cards/core/user'
import Form from '@/components/form/Form.astro'

const user = useUser(Astro.cookies)
if (user?.type !== 'user') return Astro.redirect(`/?${Astro.url.searchParams.toString()}`)

const users = await getAllUsers()
---

<Page title="Users" breadcrumbs={[{ label: 'Home', href: '/' }, { label: 'Users' }]} session={user}>
	<user-table>
		<header class="flex justify-between flex-wrap mb-4">
			<h1 class="page-heading">Users</h1>
			<Form method="get" action="/api/search">
				<input name="username" data-user-search type="text" placeholder="Search" required />
			</Form>
		</header>
		<table>
			<thead>
				<tr>
					<th class="w-3/4">Username</th>
					<th>Cards</th>
					<th>Packs</th>
				</tr>
			</thead>
			<tbody>
				{
					users.map(({ username, cardCount, packCount }) => (
						<tr>
							<td>
								<a href={`/user/${username}`}>{username}</a>
							</td>
							<td>
								<Icon name="mdi:cards" aria-hidden="true" />
								<span>{cardCount}</span>
							</td>
							<td>
								<Icon name="mdi:gift" aria-hidden="true" />
								<span>{packCount}</span>
							</td>
						</tr>
					))
				}
			</tbody>
		</table>
	</user-table>
</Page>

<style>
	user-table {
		max-width: 60rem;
		display: block;
	}

	table {
		table-layout: fixed;
		text-align: center;
		width: 100%;
		max-width: 60rem;
	}

	th {
		cursor: pointer;
	}

	tbody td {
		font-weight: 500;
		padding: 1.5rem;
		position: relative;
	}

	tbody td span {
		position: relative;
	}

	tbody td [astro-icon] {
		width: 3rem;
		color: white;
		position: absolute;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
	}

	tbody tr:nth-child(even) [astro-icon] {
		color: lightgray;
	}

	tbody tr:nth-child(even) {
		@apply bg-gray-50;
	}

	tbody tr:nth-child(odd) {
		@apply bg-gray-200;
	}

	th[data-mode='ascending']::after {
		content: '▲';
	}

	th[data-mode='descending']::after {
		content: '▼';
	}
</style>

<script>
	class UserTable extends HTMLElement {
		constructor() {
			super()
		}

		connectedCallback() {
			const headings = Array.from(this.querySelectorAll('th'))
			const body = this.querySelector('tbody')!
			const rows = Array.from(body.querySelectorAll('tr'))
			const originalRows = rows.slice()
			headings.forEach((th, index) => {
				th.addEventListener('click', () => {
					const currentMode = th.dataset.mode || 'none'
					const newMode =
						currentMode === 'none'
							? 'ascending'
							: currentMode === 'ascending'
							? 'descending'
							: 'none'

					th.dataset.mode = newMode
					if (newMode === 'none') {
						originalRows.forEach((row) => {
							body.appendChild(row)
						})
						return
					}

					const isAscending = newMode === 'ascending'
					const sortedRows = rows.sort((a, b) => {
						const aVal = a.children[index]!.textContent!
						const bVal = b.children[index]!.textContent!
						if (aVal < bVal) {
							return isAscending ? -1 : 1
						}
						if (aVal > bVal) {
							return isAscending ? 1 : -1
						}
						return 0
					})
					sortedRows.forEach((row) => {
						body.appendChild(row)
					})
				})
			})

			const searchInput = this.querySelector('[data-user-search]') as HTMLInputElement
			const doSearch = () => {
				const search = searchInput.value.toLowerCase()
				if (!search) {
					originalRows.forEach((row) => {
						body.appendChild(row)
					})
					return
				}

				for (const row of rows) {
					const username = row.children[0]!.textContent!.toLowerCase()
					if (!username.includes(search)) {
						if (row.parentElement) row.parentElement.removeChild(row)
						continue
					}
					body.appendChild(row)
				}
			}

			searchInput.addEventListener('input', doSearch)
			searchInput.addEventListener('load', doSearch)
			searchInput.addEventListener('keydown', (e) => {
				if (e.key === 'Enter') {
					e.preventDefault()
					console.log('enter pressed')
					const currentRows = body.querySelectorAll('tr')
					if (currentRows.length === 1) {
						const username = currentRows.item(0).children[0]!.textContent!
						console.log(username)
						if (!username) return

						window.location.href = `/user/${username}`
					}
				}
			})
		}
	}

	customElements.define('user-table', UserTable)
</script>
