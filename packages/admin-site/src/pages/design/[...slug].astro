---
import PostButton from '@/components/form/PostButton.astro'
import Page from '@/layouts/Page.astro'
import TradingCard from '@/components/TradingCard.astro'
import { useUser } from '@/session'
import { getCardDesignAndInstancesById } from '@lil-indigestion-cards/core/card'
import { routes, api } from '@/constants'

const user = useUser(Astro.cookies)
if (user?.type !== 'user') return Astro.redirect('/404')

const slug = Astro.params.slug
if (!slug) {
	return Astro.redirect(`${routes.DESIGNS}?error=No design id provided`)
}

const from = new URL(Astro.request.headers.get('referer') ?? '/').pathname.split('/')[1]
const [seasonId, designId] = slug.split('/')
console.log({ seasonId, designId, slug, from })

if (!seasonId) {
	return Astro.redirect(`${routes.DESIGNS}?alert=No season id provided: ${slug}`)
}

if (!designId) {
	return Astro.redirect(`${routes.SEASONS}/${seasonId}`)
}

const {
	cardDesigns: [design],
	cardInstances,
} = await getCardDesignAndInstancesById({ designId, seasonId })
const openedCards = cardInstances.filter((card) => card.openedAt !== undefined)

if (!design) {
	return Astro.redirect(`${routes.DESIGNS}?error=Design ${designId} not found`)
}

const breadcrumbs = [{ label: 'Home', href: '/' }]

if (from === 'design') {
	breadcrumbs.push(
		{ label: 'Designs', href: routes.DESIGNS },
		{ label: design.cardName, href: `${routes.DESIGNS}/${slug}` }
	)
} else {
	breadcrumbs.push(
		{ label: 'Seasons', href: routes.SEASONS },
		{ label: design.seasonName, href: `${routes.SEASONS}/${design.seasonId}` },
		{ label: design.cardName, href: `${routes.DESIGNS}/${slug}` }
	)
}
---

<Page
	title={`${design.cardName} - ${design.seasonName}`}
	class="flex flex-col gap-4"
	session={user}
	breadcrumbs={breadcrumbs}>
	<h1 class="text-3xl font-display italic my-3">{design.cardName}</h1>
	<TradingCard>
		<img src={design.imgUrl} width="300" class="max-w-full" />
	</TradingCard>
	{design.cardDescription ? <p class="text-lg  max-w-sm">{design.cardDescription}</p> : null}
	<ul class="border border-gray-300 p-4 max-w-4xl">
		{
			openedCards.length > 0 ? (
				openedCards.map((card) => (
					<li>
						<a href="#">{card.rarityId}: </a>
						<a href={`${routes.USERS}/${card.username}`}>Owned by {card.username}</a>
					</li>
				))
			) : (
				<p>No one has this card yet!</p>
			)
		}
	</ul>
	<PostButton
		class="bg-red-500 hover:bg-red-700 text-black hover:text-white"
		id="delete-design-form"
		url={`${api.DELETE_CARD_DESIGN}/${seasonId}/${designId}?redirect=${routes.DESIGNS}`}
		label="Delete Card"
	/>
</Page>

<script>
	const form = document.getElementById('delete-design-form') as HTMLFormElement

	form.addEventListener('submit', async (e) => {
		// prevent default, confirm, then resume
		const confirmation = confirm('Are you sure you want to delete this design?')
		if (!confirmation) e.preventDefault()
	})
</script>
